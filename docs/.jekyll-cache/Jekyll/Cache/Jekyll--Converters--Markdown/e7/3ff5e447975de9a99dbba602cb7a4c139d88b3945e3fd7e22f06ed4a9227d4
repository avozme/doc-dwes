I"æ…<h1 id="7-ajax">7. Ajax</h1>

<h2 id="71-un-poco-de-introducci√≥n-al-asunto">7.1. Un poco de introducci√≥n al asunto</h2>

<h2 id="711-qu√©-es-ajax">7.1.1. ¬øQu√© es Ajax?</h2>

<p><strong>Ajax</strong> significa <strong>Asynchronous Javascript And XML</strong>.</p>

<p>Qu√© bien, ¬øno?</p>

<p>¬øY eso qu√© quiere decir?</p>

<p>Ajax es una tecnolog√≠a javascript para lanzar y recibir las peticiones al servidor en segundo plano. La p√°gina sigue funcionando con normalidad mientras la petici√≥n al servidor se resuelve: el usuario puede interactuar con ella y la p√°gina responde y no se queda <em>congelada</em> a la espera de que el servidor conteste.</p>

<p><strong>Todo eso es lo que significa ‚Äúde forma as√≠ncrona‚Äù</strong>.</p>

<p>Esta forma de trabajar, que puede parecer una chorrada, se cre√≥ para que las p√°ginas dieran la impresi√≥n de ser m√°s √°giles de lo que en realidad eran (sobre todo en una √©poca en la que las redes eran m√°s lentas y los servidores pod√≠an tardar bastante en responder).</p>

<p>En la actualidad, Ajax ha permitido algo que parec√≠a impensable hace una d√©cada: que gran parte de la p√°gina se ejecute en el cliente y que se pidan al servidor solo los fragmentos de la p√°gina que necesitan ser actualizados. Ajax permite actualizar las p√°ginas sin necesidad de recargarlas por completo, lo que mejora la usabilidad y velocidad de respuesta, y cambia radicalmente nuestra forma de programar una aplicaci√≥n web.</p>

<h3 id="712-ajax-no-sirve-en-realidad-para-nada">7.1.2. Ajax no sirve, en realidad, para nada</h3>

<p>Esa es la pura verdad.</p>

<p>Puedes programar una aplicaci√≥n web completa, compleja y profesional sin hacer una sola petici√≥n Ajax.</p>

<p>Pero Ajax mejora el rendimiento y la experiencia del usuario. Puedes sustituir unas pocas peticiones convencionales por peticiones Ajax sin cambiar demasiado en tu aplicaci√≥n. Por ejemplo, para borrar un recurso, puedes lanzar la petici√≥n DESTROY por Ajax y actualizar tu vista para eliminar el recurso del documento HTML cuando el servidor responda.</p>

<p>Esto es f√°cil de hacer. Y muy recomendable. Te aconsejo empezar a trastear con Ajax de este modo.</p>

<h3 id="713-y-sin-embargo-ajax-ha-cambiado-la-forma-en-la-que-desarrollamos-aplicaciones-web">7.1.3. Y, sin embargo, Ajax ha cambiado la forma en la que desarrollamos aplicaciones web</h3>

<p>Como algo que, en realidad, no sirve para nada ha logrado cambiar la forma en la que desarrollamos aplicaciones web puede parecer un misterio a simple vista, pero existe una raz√≥n muy simple para ello:</p>

<p>La mayor√≠a de las aplicaciones web se pasan todo el tiempo haciendo lo mismo: accediendo a recursos de una base de datos para consultarlos, crearlos, modificarlos o borrarlos, todo ello mediante un interfaces de usuario b√°sicamente semejantes. Es decir, el interfaz de usuario para crear, modificar y borrar productos de una base de datos es pr√°cticamente el mismo que el que se usa para crear, modificar y borrar proveedores, por decir algo.</p>

<p>As√≠ que alguien se pregunt√≥: ¬øpor qu√© estamos programando todo el tiempo lo mismo?</p>

<p>Ajax nos permite hacer algo muy ingenioso para evitar este engorro: dise√±ar un interfaz de usuario gen√©rico y vac√≠o, solo compuesto por contenedores preparados para nutrirse de datos del servidor.</p>

<p>Por ejemplo, podemos dise√±ar un t√≠pico interfaz de usuario HTML que nos muestre una lista de recursos (productos, proveedores, o lo que sea) junto con los botones de ‚ÄúUpdate‚Äù y ‚ÄúDelete‚Äù, adem√°s de un bot√≥n de ‚ÄúAdd new‚Äù. Pero ese interfaz estar√° vac√≠o, y mediante Ajax lo cargaremos con productos, con proveedores o con lo que necesitemos. Crearemos el interfaz una vez y lo podemos reutilizar miles de veces, para todo tipo de recursos.</p>

<p>Este tipo de aplicaciones, tambi√©n llamadas <strong>SPA (Single-page applications)</strong>, necesitan una arquitectura algo distinta de la que usamos en las aplicaciones web tradicionales, adem√°s de una librer√≠a en el lado del cliente para ayudarnos en la creaci√≥n de contenedores gen√©ricos (librer√≠as como <strong>Angular</strong>, <strong>React</strong> o <strong>Vue.js</strong>). Aunque excede a nuestros prop√≥sitos profundizar en estas librer√≠as, hemos visto algunos fundamentos sobre el uso de Vue.js con Laravel en el cap√≠tulo dedicado a Laravel. Cons√∫talo si quieres profundizar en esta forma de uso masivo de Ajax.</p>

<p>En lo que sigue de este cap√≠tulo, utilizaremos Ajax de forma puntual en el entorno de una aplicaci√≥n web convencional con arquitectura MVC.</p>

<h2 id="72-c√≥mo-enviar-peticiones-ajax-al-servidor">7.2. C√≥mo enviar peticiones Ajax al servidor</h2>

<h3 id="721-peticiones-sin-datos-al-servidor">7.2.1. Peticiones sin datos al servidor</h3>

<p>La forma m√°s sencilla (y primitiva) de usar Ajax es lanzar una petici√≥n as√≠ncrona al servidor sin que el usuario de la web se percate de ello (porque se har√° en segundo plano). El servidor no sabr√° si la petici√≥n se lanz√≥ en primer o en segundo plano y, en realidad, no le importa: √©l se limitar√° a atender la petici√≥n.</p>

<p>Para lanzar una petici√≥n mediante Ajax usando JavaScript tradicional (luego veremos c√≥mo hacerlo con jQuery, que simplifica bastante el proceso), necesitamos crear un objeto de tipo XMLHttpRequest. Este objeto nos permitir√° controlar todo el proceso de env√≠o de la petici√≥n, recepci√≥n de la posible respuesta y control de los errores que hayan podido ocurrir.</p>

<p>Observa detenidamente este fragmento de c√≥digo JavaScript:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">peticion_http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nx">procesa_respuesta</span><span class="p">;</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">http://servidor/recurso</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>


<span class="kd">function</span> <span class="nx">procesa_respuesta</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">peticion_http</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">peticion_http</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">peticion_http</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>En las cuatro primeras l√≠neas se crea el objeto de tipo XMLHttpRequest y luego se hacen tres cosas clave con √©l:</p>
<ol>
  <li>Se le indica qu√© funci√≥n se debe ejecutar cuando el servidor responda. Recuerda que esta funci√≥n se ejecutar√° tambi√©n en segundo plano, sin que el usuario de la p√°gina se percate de que est√° sucediendo algo.</li>
  <li>Se le indica qu√© recurso del servidor se quiere invocar (t√≠picamente, una URL). Para ello se usa el m√©todo open(). Ah√≠ tambi√©n se indica el m√©todo de env√≠o de datos al servidor (GET o POST), incluso si no se env√≠an datos al servidor en absoluto, como en este ejemplo.</li>
  <li>Por √∫ltimo, se lanza la petici√≥n al servidor con el m√©todo send(). El argumento ‚Äúnull‚Äù debe sustituirse por los datos que se env√≠an al servidor mediante GET en caso de que los hubiera.</li>
</ol>

<p>Eso deja lista la petici√≥n. JavaScript permanecer√° a la escucha en segundo plano hasta que el servidor responda. Cuando lo haga, se ejecutar√° la funci√≥n procesa_respuesta().</p>

<p>En esa funci√≥n se hacen tres cosas muy importantes:</p>
<ol>
  <li>Se comprueba si el estado de la petici√≥n (readyState) es 4. Eso significa que el servidor ha terminado de procesarla. La petici√≥n pasa por varios estados hasta completarse, y el servidor informa de todos ellos. Es decir, la funci√≥n procesa_respuesta() se ejecuta al menos una vez para cada uno de estos estados:
    <ul>
      <li>readyState == 1 -&gt; OPENED: Se acaba de abrir la comunicaci√≥n con el servidor. Es decir, se acaba de ejecutar open().</li>
      <li>readyState == 2 -&gt; HEADERS_RECEIVED: Se acaba de enviar la petici√≥n al servidor. Es decir, se acaba de ejecutar send().</li>
      <li>readyState == 3 -&gt; LOADING: Se est√° recibiendo la respuesta del servidor.</li>
      <li>readyState == 4 -&gt; DONE: Se ha recibido la respuesta del servidor.
Por eso es necesario comprobar que readyState == 4 antes de hacer ninguna otra cosa.</li>
    </ul>
  </li>
  <li>Se comprueba que la respuesta del servidor es 200. Esto, seg√∫n el protocolo http, significa que no hay errores en la p√°gina. El servidor puede responder con otros c√≥digos, como 404 (recurso no encontrado) o 403 (prohibido el acceso a ese recurso). Puedes encontrar en miles de sitios de internet todas las posibles respuestas de una petici√≥n http.</li>
  <li>Si readyState == 4 y status == 200, significa que todo ha ido bien y el servidor ha respondido. Ya podemos hacer lo que sea que tengamos que hacer con esa respuesta. En este ejemplo, nos hemos limitado a mostrar esa respuesta en un alert. Observa en el ejemplo como la respuesta del servidor se recibe en forma de String en el atributo responseText.</li>
</ol>

<h3 id="722-peticiones-con-datos-al-servidor-get">7.2.2. Peticiones con datos al servidor (GET)</h3>

<p>Si has entendido el ejemplo anterior, este te va a costar muy poco. Simplemente, vamos a enviar algunos datos al servidor por GET, exactament igual que lo har√≠amos si los envi√°ramos mediante un formulario. De hecho, el servidor no notar√° la diferencia.</p>

<p>El c√≥digo para lograrlo es este:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cp</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">codigo_postal</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">telefono</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">telefono</span><span class="dl">"</span><span class="p">);</span>
 
<span class="nx">query_string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&amp;codigo_postal=</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">cp</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="o">+</span>
               <span class="dl">"</span><span class="s2">&amp;telefono=</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">telefono</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>

<span class="nx">peticion_http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nx">procesa_respuesta</span><span class="p">;</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">http://servidor/scrip.php</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">query_string</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">procesa_respuesta</span><span class="p">()</span> <span class="p">{</span> <span class="p">....</span> <span class="p">}</span>
</code></pre></div></div>

<p>No ponemos la funci√≥n procesa_respuesta() porque es la misma de antes. En cambio, s√≠ que hay algunos a√±adidos en el c√≥digo de preparaci√≥n de la solicitud, ¬øverdad?</p>

<p>Para empezar, hemos cogido un par de datos de un formulario: el c√≥digo postal y el tel√©fono (puede ser un formulario de alta de usario o algo por el estilo: recuerda que esto solo es un ejemplo).</p>

<p>Luego hemos creado una variable llamada queryString que contiene el string con los datos que queremos enviar al servidor por GET. Como los datos por GET se codifican en la URL, es necesario usar el formato de la URL (separando las variables con el car√°cter &amp;) y codificar cualquier car√°cter especial (con la funci√≥n encodeURIComponente() de Javascript).</p>

<p>Por √∫ltimo, en el momento de hacer send(), hemos agregado nuestra query_string para que sea enviada al servidor. Una vez all√≠, PHP la podr√° procesar como cualquier otra string enviada por GET, es decir, usando las variables superglobales $_GET o $_REQUEST.</p>

<h3 id="723-peticiones-con-datos-al-servidor-post">7.2.3. Peticiones con datos al servidor (POST)</h3>

<p>Si, en lugar de enviar datos al servidor por GET, preferimos enviarlos por POST, la t√©cnica es muy similar a la anterior, con un par de variaciones:</p>

<ol>
  <li>Debemos indicar ‚ÄúPOST‚Äù en lugar de ‚ÄúGET‚Äù en el m√©todo open(), como es l√≥gico.</li>
  <li>Debemos indicarle a Ajax que el paquete http llevar√° variables POST en su cabecera. Para eso se usa el m√©todo setRequestHeader().</li>
</ol>

<p>Lo puedes ver en el siguiente ejemplo:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cp</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">codigo_postal</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">telefono</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">telefono</span><span class="dl">"</span><span class="p">);</span>
 
<span class="nx">query_string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&amp;codigo_postal=</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">cp</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="o">+</span>
               <span class="dl">"</span><span class="s2">&amp;telefono=</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">telefono</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>

<span class="nx">peticion_http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nx">procesa_respuesta</span><span class="p">;</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">http://servidor/script.php</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/x-www-form-urlencoded</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">query_string</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">procesa_respuesta</span><span class="p">()</span> <span class="p">{</span> <span class="p">....</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="724-peticiones-con-datos-al-servidor-xml">7.2.4. Peticiones con datos al servidor (XML)</h3>

<p>Todo esto est√° muy bien si lo que enviamos al servidor son un par de datos sueltos, como el c√≥digo postal y el tel√©fono en los ejemplos anteriores. Pero ¬øy si tenemos que enviar mucha informaci√≥n? Digamos, por ejemplo, un array de c√≥digos postales y tel√©fonos.</p>

<p>En ese caso, usar GET se hace inviable (por la limitaci√≥n de caracteres), as√≠ que recurriremos a POST y empaquetaremos nuestros datos en un string XML o JSON. En este ejemplo, vamos a usar XML:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cp</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">codigo_postal</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">telefono</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">telefono</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">xml</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;datos&gt;</span><span class="dl">"</span> <span class="o">+</span>
      <span class="dl">"</span><span class="s2">&lt;cp&gt;</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">cp</span> <span class="o">+</span> <span class="o">&lt;</span><span class="sr">/cp&gt;" + &lt;telefono&gt; + telefono + &lt;/</span><span class="nx">telefono</span><span class="o">&gt;</span> <span class="o">+</span>
      <span class="dl">"</span><span class="s2">&lt;/datos&gt;</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">peticion_http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nx">procesa_respuesta</span><span class="p">;</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">http://servidor/script.php</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/x-www-form-urlencoded</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">peticion_http</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">xml</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">procesa_respuesta</span><span class="p">()</span> <span class="p">{</span> <span class="p">....</span> <span class="p">}</span>
</code></pre></div></div>

<h2 id="73-c√≥mo-recibir-la-respuesta-del-servidor">7.3. C√≥mo recibir la respuesta del servidor</h2>

<p>En todos los ejemplos anteriores, el servidor conestaba con un simple texto que mostr√°bamos por medio de un alert() de Javascript. Ni siquiera nos preocupamos por el contenido de ese texto. Podr√≠a ser cualquier cosa: algo como ‚Äúpetici√≥n procesada‚Äù, ‚Äúusuario borrado‚Äù o cosas por el estilo.</p>

<p>Pero ¬øy si el servidor tiene que contestar algo complejo? Por ejemplo, una tabla completa. En ese caso, como es l√≥gico, necesitamos recurrir a XML o JSON para empaquetar todos los datos de la respuesta y enviarlos desde el servidor hacia el cliente.</p>

<p>Vamos a ver un par de ejemplo, uno resuelto con XML y otro con JSON. En ninguno de los dos casos mostraremos c√≥mo lo hace el servidor para crear los datos: supondremos que eso ya sabes hacerlo, puesto que se trata de PHP. Nos centraremos en c√≥mo procesa Ajax, es decir, Javascript, esa respuesta.</p>

<h3 id="731-recepci√≥n-de-datos-xml">7.3.1. Recepci√≥n de datos XML</h3>

<p>En este ejemplo, el servidor nos devuelve un String XML consistente en un array de c√≥digos postales y tel√©fonos (de clientes, de usuarios, de lo que sea. Recuerda -otra vez- que solo es un ejemplo).</p>

<p>Observa c√≥mo esa respuesta se accede por medio de responseXML (no responseText, como hasta ahora). A partir de ah√≠, Javascript puede usar esa respuesta como un objeto XML cualquiera: puede buscar hijos de un nodo, puede buscar nodos por su tag, etc.</p>

<p>En el ejemplo, nos limitamos a recuperar el c√≥digo postal y el tel√©fono del primer elemento del array y a mostrarlo en el documento preexistente, en una capa con el ID ‚Äúrespuesta‚Äù.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">procesaRespuesta</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">peticion_http</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">peticion_http</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">xml</span> <span class="o">=</span> <span class="nx">peticion_http</span><span class="p">.</span><span class="nx">responseXML</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">datos</span> <span class="o">=</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">"</span><span class="s2">datos</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
      <span class="kd">var</span> <span class="nx">telefono</span> <span class="o">=</span> <span class="nx">datos</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">"</span><span class="s2">telefono</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span>
                     <span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">cp</span> <span class="o">=</span> <span class="nx">datos</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">"</span><span class="s2">cp</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span>
               <span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">;</span>
 
      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">respuesta</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> 
             <span class="dl">"</span><span class="s2">Codigo postal = </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">codigo_postal</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;br/&gt;</span><span class="dl">"</span> <span class="o">+</span> 
             <span class="dl">"</span><span class="s2">Telefono = </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">telefono</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="732-recepci√≥n-de-datos-json">7.3.2. Recepci√≥n de datos JSON</h3>

<p>Javascript prefiere JSON a XML, es no es un secreto. Casi todos los programadores lo prefieren, en realidad. As√≠ que veamos c√≥mo hacer lo mismo que antes, pero ahora con JSON.</p>

<p>La respuesta JSON llegar√° en responseText, no en responseXML. Eso significa que Javascript la recibe como un String cualquiera.</p>

<p>Luego, con la funci√≥n eval() de Javascript, podemos convertir ese String en un objeto complejo y, a partir de ah√≠, usar ese objeto para acceder a todos sus elementos.</p>

<p>En el ejemplo, como antes, solo accederemos al primer c√≥digo postal y al primer tel√©fono y los mostraremos en la capa ‚Äúrespuesta‚Äù de nuestro documento.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">procesaRespuesta</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">http_request</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">http_request</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">http_request</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">objeto_json</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="dl">"</span><span class="s2">(</span><span class="dl">"</span><span class="o">+</span><span class="nx">json</span><span class="o">+</span><span class="dl">"</span><span class="s2">)</span><span class="dl">"</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">telefono</span> <span class="o">=</span> <span class="nx">objeto_json</span><span class="p">.</span><span class="nx">datos</span><span class="p">.</span><span class="nx">telefono</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">codigo_postal</span> <span class="o">=</span> <span class="nx">objeto_json</span><span class="p">.</span><span class="nx">datos</span><span class="p">.</span><span class="nx">cp</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">respuesta</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> 
             <span class="dl">"</span><span class="s2">Codigo postal = </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">codigo_postal</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;br/&gt;</span><span class="dl">"</span> <span class="o">+</span> 
             <span class="dl">"</span><span class="s2">Telefono = </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">telefono</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="74-ajax-y-jquery">7.4. Ajax y jQuery</h2>

<p>El uso de jQuery facilita enormemente la programaci√≥n de llamadas Ajax al servidor. El decir: se puede manejar Ajax al 100% sin recurrir a jQuery, pero con jQuery es m√°s f√°cil.</p>

<p>jQuery ofrece varias funciones para hacer llamadas Ajax:</p>

<ul>
  <li>$.ajax() ‚Üí La m√°s configurable pero tambi√©n la m√°s compleja.</li>
  <li>$.get() ‚Üí Para lanzar peticiones GET sencillas.</li>
  <li>$.post() ‚Üí Para lanzar peticiones POST sencillas</li>
  <li>$.load() ‚Üí Para lanzar peticiones GET y cargar la respuesta en una capa.</li>
</ul>

<p>Vamos a verlas una por una.</p>

<h3 id="741-funci√≥n-ajax">7.4.1. Funci√≥n $.ajax()</h3>

<p>Tiene esta sintaxis:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
  <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/ruta/hasta/script.php</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="dl">'</span><span class="s1">parametro1=valor1&amp;parametro2=valor2</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">contentType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">tipo de contenido que enviamos al servidor</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">tipo de contenido con el que responde el servidor</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Aqu√≠ el c√≥digo para procesar la respuesta },</span>
  <span class="na">fail</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// Aqu√≠ el c√≥digo para procesar el error }</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Bueno, en realidad $.ajax() admite m√°s argumentos aparte de los que te muestro aqu√≠ arriba, pero estos son los principales. Si quieres verlos todos, te sugiero que te des una vuelta por la documentaci√≥n oficial de jQuery, que por cierto es fant√°sticamente buena.</p>

<p>Observa como, en una sola invocaci√≥n, conseguimos hacerlo todo: indicar la URL donde se dirigir√° la petici√≥n, el tipo de env√≠o de datos (GET o POST), los datos que enviamos al servidor, el tipo de datos que recibiremos como respuesta, el nombre de la funci√≥n que procesar√° la respuesta e, incluso, el nombre de la funci√≥n que procesar√° el error, en caso de que el servidor responda con un c√≥digo de error.</p>

<p>En <strong><em>contentType</em></strong> puedes indicar el tipo de datos que vas a enviar al servidor. Por defecto, se supone que es ‚Äòapplication/x-www-form-urlencoded; charset=UTF-8‚Äô, pero te puede interesar cambiarlo por ‚Äòmultipart/form-data‚Äô, por ejemplo, si vas a enviar un archivo binario (como una imagen).</p>

<p>En <strong><em>dataType</em></strong> puedes indicar el tipo de datos que se espera que te devuelva el servidor. Por defecto ser√° ‚Äòtext‚Äô, es decir, texto plano, pero puedes indicar cosas muy variadas, como ‚Äòxml‚Äô, ‚Äòjson‚Äô, ‚Äòhtml‚Äô o incluso ‚Äòscript‚Äô si el servidor te va a devolver un fragmento de c√≥digo JavaScript. Esto ayuda a su procesamiento posterior en la secci√≥n <strong><em>success</em></strong>.</p>

<p>Por √∫ltimo, en la secci√≥n <strong><em>success</em></strong> puedes acceder a los datos devueltos por el servidor a trav√©s de la variable <strong><em>data</em></strong>, que tendr√° el formato correspondiente al tipo de datos que hayas indicado en <strong><em>dataType</em></strong>. Por ejemplo, si en <strong><em>dataType</em></strong> especificaste que el servidor iba a responder con un objeto json, jQuery tratar√° de convertir la respuesta a un objeto asumiendo el formato json y te la dejar√° preparada y lista para usar en el par√°metro <strong><em>data</em></strong>.</p>

<p>Aqu√≠ vemos un ejemplo de uso de $.ajax():</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mi-script.php</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">data</span><span class="p">:</span> <span class="p">{</span><span class="na">email</span><span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#email</span><span class="dl">"</span><span class="p">).</span><span class="nx">val</span><span class="p">()},</span>
      <span class="na">success</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                  <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#message</span><span class="dl">"</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
               <span class="p">},</span>
      <span class="na">error</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
                  <span class="nx">alert</span><span class="p">(</span><span class="nx">req</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">status</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">error</span><span class="p">);</span>
             <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">});</span>
</code></pre></div></div>

<p>Si es la primera vez que ves c√≥digo jQuery, esto te sonar√° tanto como el chino mandar√≠n. Pero no te agobies, que en realidad es muy f√°cil. Te lo explico en cuatro frases.</p>

<p>La primera l√≠nea, <strong><em>$(document).ready()</em></strong>, sirve para indicar al navegador que no debe ejecutar la funci√≥n que haya ah√≠ dentro hasta que el documento no se haya cargado por completo y el √°rbol DOM desplegado en la memoria del cliente. Solo entonces se lanzar√° el resto del c√≥digo. Es algo muy com√∫n en el c√≥digo jQuery.</p>

<p>Despu√©s viene la llamada Ajax, con varios de los atributos que mencion√°bamos antes. F√≠jate que no hemos usado ni <strong><em>dataType</em></strong> ni <strong><em>contentType</em></strong>, por lo que se asumir√°n los valores por defecto.</p>

<p>En la secci√≥n <strong><em>data</em></strong> se especifican los datos que se env√≠an a mi-script.php. Solo enviamos un email, pero podr√≠amos enviarle m√°s cosas. Observa que lo hemos formateado en json. Es lo m√°s habitual.</p>

<p>En la secci√≥n <strong><em>success</em></strong> hemos colocado directamente el c√≥digo de la funci√≥n que se lanzar√° al recibir la respuesta del servidor. Esa forma de inyectar funciones sin nombre directamente es muy habitual de jQuery. La funci√≥n se limita a tomar la respuesta del servidor y mostrarla en una capa con el ID ‚Äú#message‚Äù, pero, por supuesto, podr√≠a hacer cualquier otra cosa m√°s compleja.</p>

<p>En la secci√≥n <strong><em>error</em></strong>, por √∫ltimo, lanzamos un mensaje de error mediante un alert(), que solo saltar√° si ocurre alg√∫n error durante la petici√≥n Ajax. F√≠jate en que esa funci√≥n tiene tres par√°metros (optativos) que utilizamos para informar al usuario con m√°s detalle de qu√© error se ha producido.</p>

<h3 id="742-funciones-get-y-post">7.4.2. Funciones $.get() y $.post</h3>

<p>En muchas ocasiones, no necesitamos usar ni la m√≠nima parte de las posibilidades de la funci√≥n $.ajax(). Cuando tenemos que hacer una llamada sencillita por Ajax al servidor y no queremos complicarnos la vida, puede ser m√°s √∫til y r√°pido recurrir a las funciones $.get() y $.post().</p>

<p>Como su propio nombre indica, $.get() lanza una petici√≥n Ajax mediante GET y $.post() hace lo mismo, pero con POST. Su sintaxis es esta:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">datos</span><span class="p">,</span> <span class="nx">funcion_manejadora</span><span class="p">);</span>
<span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">datos</span><span class="p">,</span> <span class="nx">funcion_manejadora</span><span class="p">);</span>
</code></pre></div></div>

<p>Aqu√≠ tienes un ejemplo en el que llamamos por Ajax a <strong><em>mi-script.php</em></strong>, envi√°ndole mediante GET un nick de usuario. El servidor responder√° con un texto plano que contendr√° el nombre de ese usuario y lo mostrar√° mediante un alert():</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">mi-script.php</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">{</span> <span class="na">user</span><span class="p">:</span> <span class="dl">'</span><span class="s1">juanperez03</span><span class="dl">'</span> <span class="p">},</span>
      <span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hola, </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">username</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="743-funci√≥n-load">7.4.3. Funci√≥n $.load()</h3>

<p>Un caso particularmente simple (y habitual) de uso de Ajax es aquel en el que lanzamos una petici√≥n al servidor para rellenar una capa de nuestra p√°gina con la informaci√≥n que el servidor nos devuelve.</p>

<p>Por ejemplo, imagina que tenemos un formulario de registro de usuarios y, en el campo del nick del usuario, deseamos comprobar si ese nick ya est√° en uso en la base de datos. Mediante Ajax, se puede hacer de forma din√°mica y atractiva capturando el evento onblur en del campo nick y lanzando en ese momento una petici√≥n Ajax al servidor para que haga la consulta a la base de datos.</p>

<p>Si el usuario ya existe, el servidor puede responder con un texto el tipo ‚ÄúEse usuario ya existe‚Äù. En caso contrario, puede responder con ‚ÄúEse nick est√° disponible‚Äù o algo as√≠. En ambos casos, ese String puede mostrarse en una capa junto al cuadro de texto, una capa que, hasta ese momento, habr√° estado vac√≠a.</p>

<p>Este escenario tan habitual se puede resolver con $.ajax(), con $.get() o con $.post(), pero existe una funci√≥n jQuery espec√≠fica para ello. Se llama $.load() y tiene esta sintaxis:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#info</span><span class="dl">'</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="dl">'</span><span class="s1">mi-script.php</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Simplemente, se ejecuta <strong><em>mi-script.php</em></strong> en el servidor y se carga el texto de respuesta en la capa #info. Sin funcion manejadora ni historias. M√°s f√°cil, imposible, ¬øverdad?</p>

<h2 id="75-ajax-y-laravel">7.5. Ajax y Laravel</h2>

<p>Al trabajar con Laravel, estamos acostumbrados a que cada m√©todo del controlador termine devolviendo una vista completa (retur view‚Ä¶). ¬øPero qu√© pasa si hacemos una petici√≥n Ajax a una aplicaci√≥n web escrita con Laravel en el lado del servidor?</p>

<p>Laravel puede continuar devolviendo una vista completa, pero es no suele ser lo que Ajax espera recibir como respuesta. Ajax espera respuestas cortas y concisas: algo como ‚Äòtrue‚Äô o ‚Äòfalse‚Äô, o un n√∫mero, o un String o, como mucho, una estructura de datos m√°s compleja formateada en XML o JSON. Pero no una p√°gina web completa con su cabecera, su cuerpo y toda la parafernalia.</p>

<p>Y eso es precisamente lo que devuelve Laravel al rederizar cualquier vista. As√≠ que, ¬øc√≥mo lo hacemos?</p>

<h3 id="751-paso-1-crear-un-controlador-para-las-peticiones-ajax">7.5.1. Paso 1. Crear un controlador para las peticiones Ajax</h3>

<p>Esto no es imprescindible, pero s√≠ suele ser una pr√°ctica habitual: reunir todas las peticiones Ajax en un √∫nico controlador.</p>

<p>Ten en cuenta que, para el servidor, no hay diferencia entre una petici√≥n Ajax y una petici√≥n normal. El servidor recibe su petici√≥n por http o https y la atiende, ejecutando en enrutador, el controlador y todo lo que venga detr√°s, y produciendo una salida como resultado que se env√≠a de vuelta al cliente. Punto.</p>

<p>As√≠ que suele ser buena idea separar las peticiones Ajax de las peticiones normales mediante la diferenciaci√≥n de controladores, salvo que tengas una muy biena raz√≥n para no hacerlo.</p>

<p>Por lo tanto, crearemos un controlador AjaxController y a√±adiremos a nuestro enrutador (/routes/web.php) las l√≠neas correspondientes, como esta:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Route</span><span class="o">::</span><span class="nf">post</span><span class="p">(</span><span class="s1">'miJqueryAjax'</span><span class="p">,</span><span class="s1">'AjaxController@miMetodo'</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="752-paso-2-crear-los-m√©todos-del-controlador-ajaxcontroller">7.5.2. Paso 2. Crear los m√©todos del controlador AjaxController</h3>

<p>Lo siguiente ser√≠a crear los m√©todos que necesitemos en AjaxController (o, si hemos decidido no crear un controlador espec√≠fico para Ajax, crear los m√©todos en los controladores que corresponda).</p>

<p>Solo hay que tener una cosa clara: estos m√©todos que responder√°n a las peticiones Ajax <strong>no pueden terminar con una vista</strong>.</p>

<p>Imagina un m√©todo que reponder√° a una petici√≥n Ajax y que solo deba responder con un String, cuyo valor pueda ser ‚ÄúEse usuario ya existe‚Äù o ‚ÄúUsuario disponible‚Äù. Lo har√≠amos as√≠:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">AjaxController</span> <span class="kd">extends</span> <span class="nc">Controller</span> <span class="p">{</span>
   <span class="k">public</span> <span class="k">function</span> <span class="n">miMetodo</span><span class="p">()</span> <span class="p">{</span>
     <span class="mf">...</span><span class="n">aqu√≠</span> <span class="n">va</span> <span class="n">mi</span> <span class="n">c√≥digo</span><span class="mf">...</span> 
     <span class="k">if</span> <span class="p">(</span><span class="nv">$lo_que_sea</span><span class="p">)</span> <span class="nv">$result</span> <span class="o">=</span> <span class="s2">"Ese usuario ya existe"</span><span class="p">;</span>
     <span class="k">else</span> <span class="nv">$result</span> <span class="o">=</span> <span class="s2">"Usuario disponible"</span><span class="p">;</span>
     <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Imagina ahora que queremos devolver algo m√°s complicado, como un array o una colecci√≥n de datos. No pasa nada: los formateamos como json y los enviamos de regreso al cliente, as√≠:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">AjaxController</span> <span class="kd">extends</span> <span class="nc">Controller</span> <span class="p">{</span>
   <span class="k">public</span> <span class="k">function</span> <span class="n">miMetodo</span><span class="p">()</span> <span class="p">{</span>
     <span class="mf">...</span><span class="n">aqu√≠</span> <span class="n">va</span> <span class="n">mi</span> <span class="n">c√≥digo</span><span class="mf">...</span> 
      <span class="k">return</span> <span class="nf">response</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">json</span><span class="p">(</span><span class="nv">$mi_variable_compleja</span><span class="p">);</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Por supuesto, esta √∫ltima manera tambi√©n te funcionar√° para devolver un simple String, un booleano o un entero. Es la forma m√°s conveniente de terminar un m√©todo de un controlador que va a ser invocado por Ajax y no mediante una petici√≥n normal al servidor.</p>

<p>Ten en cuenta que:</p>

<ul>
  <li>La salida de una petici√≥n Ajax suele ser JSON, pero podr√≠a ser otra cosa: HTML, XML o simple texto plano.</li>
  <li>Lo repetimos una vez m√°s: para responder a una petici√≥n Ajax no se debe renderizar una vista (¬°salvo que tengas una muy buena excusa para hacerlo!), sino que basta con un return response().</li>
</ul>

<h3 id="753-agregar-el-token-csrf-a-las-peticiones">7.5.3. Agregar el token CSRF a las peticiones</h3>

<p>Como vimos al estudiar Laravel, las peticiones enviadas por POST con Laravel deben llevar el token CSRF o ser√°n rechazadas. Esto se hac√≠a para prevenir cierto tipo de ataques frecuentes a trav√©s de formularios HTML. Los detalles no son importantes aqu√≠ y, en todo caso, puedes repasar el cap√≠tulo sobre Laravel o sobre Sesiones, Cookies y Seguridad para revisar el concepto.</p>

<p>Lo importante ahora es esto: cuando lances una petici√≥n POST mediante Ajax, Laravel la rechazar√° porque no llevar√° el token CSRF. Recuerda que el servidor no tiene ni idea de si la petici√≥n llega desde Ajax o no: para √©l, se trata de datos que provienen de un formulario HTML, y si no lleva ese token, autom√°ticamente se convierte en un formulario sospechoso.</p>

<p>As√≠ que, si tienes Laravel en el lado del servidor, necesitas agregar el token CSRF a las peticiones por POST, as√≠:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
     <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
     <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mi-url</span><span class="dl">"</span><span class="p">,</span>
     <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
         <span class="dl">"</span><span class="s2">_token</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
     <span class="p">},</span>
     <span class="p">...</span><span class="nx">etc</span><span class="p">...</span> 
<span class="p">});</span>
</code></pre></div></div>

<p>Por supuesto, puedes a√±adir m√°s <strong><em>data</em></strong> a tu petici√≥n: tantos datos como necesites enviar al servidor.</p>

<p>Como esto puede ser un poco engorroso, hay una forma de agregar autom√°ticamente el token CSRF a <strong>todas</strong> las peticiones. Basta con escribir esto en el header de nuestro layout:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"csrf-token"</span> <span class="na">content=</span><span class="s">""</span><span class="nt">&gt;</span>
   <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">ajaxSetup</span><span class="p">({</span>
          <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
             <span class="dl">'</span><span class="s1">X-CSRF-TOKEN</span><span class="dl">'</span><span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">meta[name="csrf-token"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">content</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">}</span>
      <span class="p">});</span>
   <span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>A partir de ahora, podremos hacer las peticiones Ajax normalmente, porque el token CSRF se a√±adir√° √©l solito a cada petici√≥n Ajax.</p>
:ET