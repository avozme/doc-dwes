I"ƒ<h2 id="55-artisan-la-consola-que-mola">5.5. Artisan: la consola que mola</h2>

<h3 id="551-qu√©-es-artisan-y-c√≥mo-se-utiliza">5.5.1. ¬øQu√© es Artisan y c√≥mo se utiliza?</h3>

<p>Artisan es una herramienta de consola que automatiza las tareas habituales en Laravel como:</p>

<ul>
  <li>Generar esqueletos de controladores y modelos.</li>
  <li>Crear migraciones de bases de datos (para manipular la estructura de las tablas)</li>
  <li>Rellenar la BD con datos de prueba.</li>
  <li>Hacer el enrutamiento.</li>
  <li>Configurar la aplicaci√≥n.</li>
  <li>Crear bater√≠as de pruebas.</li>
  <li>Y otro mont√≥n de cosas.</li>
</ul>

<p>No te preocupes si a√∫n no entiendes qu√© significan algunas de estas cosas. Lo iremos viendo todo poco a poco. Lo importante ahora es que comprendas la tremenda utilidad de Artisan en el trabajo cotidiano con Laravel y que aprendas lo b√°sico de su sintaxis.</p>

<p>Por ejemplo, para crear un controlador, existen dos maneras:</p>

<ol>
  <li>
    <p>A mano. Nos vamos al directorio /app/Http/Controllers y creamos un archivo llamado, digamos, HolaController.php. Luego lo rellenamos con el esqueleto de un controlador vac√≠o, copiando y pegando de otro controlador existente y eliminando todo lo que no nos haga falta.</p>

    <p>Este m√©todo, obviamente, es lento, farragoso y resulta f√°cil que comentamos alg√∫n error.</p>
  </li>
  <li>
    <p>Con ayuda de artisan. Simplemente, tecleamos este comando en el directorio ra√≠z de nuestra aplicaci√≥n:</p>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan make:controller HolaController
</code></pre></div></div>

<p>Y listo. Artisan crear√° por nosotros el archivo /app/Http/Controllers/HolaController.php y lo rellenar√° con el esqueleto de un controlador vac√≠o.</p>

<h3 id="552-artisan-y-m√°quinas-virtuales">5.5.2. Artisan y m√°quinas virtuales</h3>

<p>Si utilizas Laravel con una m√°quina virtual (Homestead o Docker), tienes que hacer login en la m√°quina virtual para poder usar ejecutar los comandos de Artisan.</p>

<p>Con Vagrant:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vagrant ssh
</code></pre></div></div>

<p>Con Docker:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker exec -it &lt;id-del-contenedor&gt; bash
</code></pre></div></div>

<p>Una vez dentro de la m√°quina virtual, accede al directorio de tu aplicaci√≥n y podr√°s ejecutar cualquier comando de Artisan.</p>

<h3 id="553-comandos-principales-de-artisan">5.5.3. Comandos principales de Artisan</h3>

<p>Si tecleas:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan list
</code></pre></div></div>

<p>‚Ä¶obtendr√°s una lista con todos los comandos de Artisan v√°lidos en tu instalaci√≥n de Laravel. Esto puede variar seg√∫n tu versi√≥n de Laravel y los componentes que tengas instalados.</p>

<p>En un primer momento, necesitar√°s conocer estos comandos:</p>

<ul>
  <li>php artisan db:migrate ‚Äì&gt; Para hacer migraciones (crear la estructura de nuestra base de datos).</li>
  <li>php artisan db:seed ‚Äì&gt; Para llenar de datos predefinidos nuestra base de datos.</li>
  <li>php artisan make:migration ‚Äì&gt; Crea una migraci√≥n (para crear la estructura de la base de datos).</li>
  <li>php artisan make:seeder ‚Äì&gt; Crea un seeder (para rellenar con datos las tablas).</li>
  <li>php artisan make:controller ‚Äì&gt; Para crear un controlador.</li>
  <li>php artisan make:model ‚Äì&gt; Para crear un modelo.</li>
  <li>php artisan route:list ‚Äì&gt; Muestra todas las rutas definidas en el enrutador.</li>
</ul>
:ET