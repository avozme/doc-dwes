I"z<h1 id="81-sistemas-de-control-de-versiones">8.1. Sistemas de control de versiones</h1>

<p>Es inconcebible que un desarrollador trabaje en la actualidad sin un sistema de control de versiones.</p>

<p>F√≠jate que en la frase anterior no tiene cabida tu opini√≥n. Lo siento, pero es lo que hay. No importa si te gustan estos sistemas o no. No importa si est√°s los usas de forma habitual o siempre has huido de ellos como de la peste. No importa si ni siquiera sabes qu√© son o c√≥mo funcionan. Si quieres dedicarte profesionalmente al desarrollo de software, tienes que conocerlos porque te los vas a encontrar vayas donde vayas.</p>

<h2 id="811-qu√©-es-un-sistema-de-control-de-versiones">8.1.1. ¬øQu√© es un sistema de control de versiones?</h2>

<p>Un sistema de control de versiones es un almac√©n en la nube pensado para equipos de desarrollo de software.</p>

<p>Es decir, es como un Google Drive con esteroides.</p>

<p>El sistema de control de versiones no solo sirve para que un pu√±ado de usuarios (entre uno y miles) suban su c√≥digo fuente a la nube para ponerlo a salvo de posibles problemas con las m√°quinas locales, sino que, adem√°s, permite:</p>

<ul>
  <li>Conservar absolutamente todo el historial de versiones previas.</li>
  <li>Documentar cada cambio, de manera que siempre sea posible saber qui√©n, c√≥mo, d√≥nde, cu√°ndo y por qu√© escribi√≥ cada l√≠nea de c√≥digo.</li>
  <li>Revertir el estado del software a un estado anterior en cualquier momento.</li>
  <li>Crear ramas o ‚Äúestados alternativos‚Äù del software, que luego podr√°n fusionarse con otras ramas o abandonarse sin llegar a nada.</li>
  <li>Crear ‚Äúforks‚Äù o r√©plicas del sistema que luego podr√°n evolucionar de forma independiente (o volver a fusionarse con el contenido original).</li>
  <li>Evitar conflictos cuando el mismo c√≥digo fuente ha sido editado simult√°nemente por dos personas. Y, en caso de que estos conflictos ocurran, ayudar a resolverlos.</li>
</ul>

<p>Se trata de un buen pu√±ado de funciones, ¬øverdad? Ese es el motivo por el que absolutamente todas las organizaciones serias que se dedican a desarrollar software utilizan alg√∫n sistema de control de versiones.</p>

<p>Pero es que incluso para un programador/a solitario, que trabaja de forma aut√≥noma, las ventajas de usar uno de estos sistemas superan de lejos a los inconvenientes, porque‚Ä¶ espera un momento‚Ä¶ ¬°Resulta que no tienen ning√∫n inconveniente!</p>

<p>As√≠ que ya lo sabes: si a√∫n no los usas, este es el momento de hacer un esfuerzo e incorporar un sistema de control de versiones a tu vida.</p>

<h2 id="812-c√≥mo-funcionan-los-sistemas-de-control-de-versiones">8.1.2. ¬øC√≥mo funcionan los sistemas de control de versiones?</h2>

<p>Existen muchos sistemas de control de versiones, aunque el mercado est√° dominado por unos pocos de ellos (CVS, Subversion, Mercurial, Bazaar y, sobre todo, Git). Cada uno tiene sus propias peculiaridades, pero suelen compartir varias caracter√≠sticas comunes:</p>

<ul>
  <li>El c√≥digo fuente del proyecto (y todas sus versiones previas) se guarda en un servidor. Esa colecci√≥n de c√≥digo fuente se denomina <strong><em>repositorio</em></strong>. El servidor puede estar en Internet y pertenecer a una compa√±√≠a externa, o puede estar en nuestra intranet, instalado en una de nuestras m√°quinas.</li>
  <li>Los repositorios pueden ser remotos (si est√°n en otra m√°quina distinta de la nuestra) o locales (si est√°n en nuestra m√°quina).</li>
  <li>Cuando trabajamos, lo hacemos sobre nuestro repositorio local. Cuando una funcionalidad del c√≥digo se termina, el c√≥digo fuente modificado se sube al repositorio remoto, para que el resto de miembros del equipo puedan disponer de √©l.</li>
  <li>Si otra persona del equipo ha modificado los mismos archivos fuente que nosotros, el sistema de control de versiones no avisar√° durante la sincronizaci√≥n con el repositorio remoto y nos obligar√° a hacer manualmente una fusi√≥n de los archivos afectados, mostr√°ndonos las diferentes versiones del mismo y las l√≠neas de c√≥digo que entran en conflicto, antes de completar la sincronizaci√≥n.</li>
</ul>

<p>La sincronizaci√≥n con el repositorio remoto, por lo tanto, no puede ser autom√°tica (como en Google Drive o Dropbox), sino que hemos de hacerla expl√≠cita, momento en el cual el sistema nos avisar√° de posibles conflictos. Esta es la √∫nica manera de resolver adecuadamente esos conflictos en proyectos donde haya mucha gente trabajando simult√°neamente.</p>

<h1 id="82-git-b√°sico">8.2. Git b√°sico</h1>

<p>Git es, en la actualidad, el sistema de control de versiones m√°s utilizado del mundo con diferencia. Tambi√©n es uno de los m√°s completos y complejos. As√≠ que, si aprendes a utilizar Git, podr√°s apa√±√°rtelas con cualquier otro sistema de control de versiones.</p>

<p>En esta secci√≥n vamos a ver c√≥mo se usa Git a nivel b√°sico. El acceso a las funciones avanzadas ir√° viniendo solo, con el tiempo y el uso.</p>

<h2 id="821-poniendo-en-marcha-git">8.2.1. Poniendo en marcha Git</h2>

<p>Git es un sistema de control de versiones de c√≥digo abierto. De hecho, se cre√≥ inicialmente (y se sigue usando para ello) para desarrollar el n√∫cleo de Linux. Eso quiere decir que cualquiera puede coger el c√≥digo, modificarlos, adaptalo y distribuirlo.</p>

<p>Por eso encontrar√°s multitud de implementaciones de Git, as√≠ como muchos servidores y clientes que lo usan. Todos son compatibles entre s√≠.</p>

<p>Git crea repositorios locales y remotos que hay que mantener sincronizados manualmente. Eso quiere decir que, para usar Git, necesitas al menos:</p>

<ul>
  <li>Instalar un cliente de Git en tu ordenador de trabajo.</li>
  <li>Instalar un servidor de Git en el ordenador donde vayas a alojar el repositorio remoto.</li>
</ul>

<p>Para el servidor Git, mucha gente utiliza servidores gratuitos disponibles en Internet. Los m√°s conocidos de ellos son GitHub y GitLab. Son sitios web donde te registras y ¬°voil√†!, ya tienes disponible un servidor Git en l√≠nea para que funcione de repositorio remoto. Adem√°s, estos sitios proporcionan caracter√≠sticas adicionales muy convenientes, como sistemas de gesti√≥n de <em>issues</em> o tareas pendientes, gesti√≥n de proyectos, estad√≠sticas, evaluaci√≥n de la calidad de software, etc. Tambi√©n funcionan como redes sociales para desarrolladores.</p>

<p>En fin, que, salvo que seas un paranoico de la seguridad o est√©s desarrollando c√≥digo ultrasecreto para la NSA o el CSIF, usar GitHub o GitLab como repositorio remoto es la opci√≥n m√°s interesante. As√≠ que ya puedes registrarte en alguno de los dos.</p>

<p>Despu√©s de eso, solo te queda instalarte en tu ordenador un cliente Git.</p>

<p>Clientes Git hay muchos, algunos m√°s bonitos que otros. Yo te recomiendo el cliente b√°sico en modo texto, con el que tendr√°s que salirte a la consola y teclear comandos. Teclear comandos incomprensibles de forma r√°pida y segura siempre mola mucho de cara a los dem√°s. A parte de eso, aprenderse los comandos b√°sicos de Git te salvar√° la vida en alg√∫n momento de tu futuro profesional con toda seguridad, te lo aseguro, as√≠ que es una buena inversi√≥n de tiempo.</p>

<p>Puedes encontrar los clientes oficiales de Git en la web del proyecto: https://git-scm.com/</p>

<p>Cuando hayas aprendido a apa√±arte con los comandos, es posible que no quieras recurrir a los clientes gr√°ficos, pero, por si acaso, te comento que existen mogoll√≥n de ellos que te permitir√°n sincronizar tus archivos con un solo clic y resolver conflictos de forma r√°pida y muy visual. Algunos de ellos son: GitHub Desktop (ofrecido por GitHub), GitKraken, Git Cola o Tortoise Git.</p>

<p>Por √∫ltimo, ten en cuenta que todos los entornos de desarrollo medianamente potentes ofrecen una integraci√≥n absoluta con Git. Es decir, que si usas Visual Studio Code, o Eclipse, o NetBeans, o muchos otros, no necesitar√°s ning√∫n cliente git adicional, porque ya lo traen incorporado. Tan solo debes configurar la ruta el repositorio remoto y al local, y hala, a programar y a sincronizar como si no hubiera un ma√±ana.</p>

<h3 id="822-creando-un-repositorio-nuevo">8.2.2. Creando un repositorio nuevo</h3>

<p>Vale, ya tenemos nuestra cuenta en GitHub o GitLab y hemos instalado un cliente Git en nuestra m√°quina. ¬øAhora qu√©?</p>

<p>Podemos encontrarnos ante dos escenarios diferentes:</p>

<ol>
  <li>Voy a empezar un proyecto nuevo y quiero inicializar un repositorio en blanco.</li>
  <li>Ya tengo mi c√≥digo fuente (todo o una parte) escrito y quiero a√±adirlo a un repositorio git.</li>
</ol>

<p>Vamos a ver c√≥mo proceder en cada caso. Lo haremos mostrando c√≥mo se usa el cliente git de l√≠nea de comando. Desde los clientes gr√°ficos, el proceso ser√° parecido, pero tendr√°s que trastear con el cliente en cuesti√≥n o leerte su documentaci√≥n para ver los detalles.</p>

<h4 id="voy-a-empezar-un-proyecto-nuevo-y-quiero-inicializar-un-repositorio-en-blanco">Voy a empezar un proyecto nuevo y quiero inicializar un repositorio en blanco.</h4>

<ol>
  <li>Abre un terminal de l√≠nea de comandos y mu√©vete al directorio donde tienes pensado crear tu c√≥digo fuente. Usa para ello los comandos <em>cd directorio</em> (para cambiar de directorio) o <em>mk directorio</em> (para crear un directorio nuevo).&lt;/li&gt;</li>
  <li>
    <p>Para crear un repositorio git local en el directorio elegido, simplemente teclea este comando:&lt;/li&gt;</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ git init
</code></pre></div>    </div>
  </li>
  <li>
    <p>Para conectar este repositorio local con un repositorio remoto en GitHub o GitLab, escribe a continuaci√≥n este comando (sustituye URI por la direcci√≥n de tu repositorio que te habr√° proporcionado GitHub o GitLab. Por ejemplo, en GitHub, una URI de repositorio tiene un aspecto como este: https://github.com/usuario/nombre-repositorio.git):</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ git remote add origin &lt;URI&gt;
</code></pre></div>    </div>
    <p>Obviamente, el repositorio remoto deber√≠as haberlo creado antes desde la web de GitHub o GitLab.</p>
  </li>
</ol>

<p>Eso es todo. A partir de ahora, podr√°s empezar a desarrollar tu c√≥digo en local y a sincronizar tus archivos con el repositorio remoto cada vez que lo necesites. El procedimiento para hacer esto √∫ltimo lo describimos un poco m√°s adelante.</p>

<h4 id="ya-tengo-mi-c√≥digo-fuente-y-quiero-a√±adirlo-a-un-repositorio-git">Ya tengo mi c√≥digo fuente y quiero a√±adirlo a un repositorio git</h4>

<p>Este caso es un poquito m√°s complejo, pero tampoco mucho. Aseg√∫rate de tener ya creado un repositorio (vac√≠o) en GitHub o GitLab antes de seguir esta gu√≠a.</p>

<ol>
  <li>Abre un terminal de l√≠nea de comandos y mu√©vete al directorio donde tengas tu c√≥digo fuente. Usa para ello el comando cd <directorio>.</directorio></li>
  <li>
    <p>Para crear un repositorio git local en ese directorio, simplemente teclea este comando:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ git init
</code></pre></div>    </div>
  </li>
  <li>
    <p>Para conectar este repositorio local con un repositorio remoto en GitHub o GitLab, escribe a continuaci√≥n este comando (sustituye <URI> por la direcci√≥n de tu repositorio que te habr√° proporcionado GitHub o GitLab. Por ejemplo, en GitHub, una URI de repositorio tiene un aspecto como este: https://github.com/usuario/nombre-repositorio.git):</URI></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ git remote add origin &lt;URI&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p>Edita el archivo .gitignore para incluir en √©l los archivos y directorios que no quieres incluir en el repositorio. Esto suele referirse a archivos de configuraci√≥n, im√°genes y otros recursos que no son parte intr√≠nseca del c√≥digo fuente o librer√≠as de terceros. M√°s adelante hablaremos del archivo .gitignore con m√°s detalle.</p>
  </li>
  <li>
    <p>Haz tu primer commit para a√±adir todo el c√≥digo fuente que ya tienes:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ git add *
 $ git commit -m "Primer commit con todo el c√≥digo preexistente"
</code></pre></div>    </div>
  </li>
  <li>
    <p>Sube el c√≥digo de ese commit a tu repositorio remoto (te pedir√° tu usuario y contrase√±a en GitHub o GitLab):</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ git push
</code></pre></div>    </div>
  </li>
</ol>

<p>Si ahora entras en tu perfil de GitHub o GitLab, ver√°s que el repositorio remoto ya contiene todos los archivos que ten√≠as en tu proyecto (excepto los que se√±alaste en .gitignore). Los repositorios local y remoto ya est√°n creados y puedes empezar a trabajar con normalidad, escribiendo c√≥digo y subi√©ndolo al repositorio remoto cuando lo necesites. Este proceso lo describiremos en detalle enseguida.</p>

<p>Si no has entendido alguno de estos pasos, no te agobies. Enseguida te quedar√°n m√°s claros.</p>

<h4 id="m√°s-cosas-sobre-la-inicializaci√≥n-de-un-repositorio">M√°s cosas sobre la inicializaci√≥n de un repositorio</h4>

<p>Hay otro par de cosas que te interesa hacer al iniciarlizar un repositorio. Solo tendr√°s que hacerlo una vez y, despu√©s, tu repositorio lo recordar√°.</p>

<p>Despu√©s del <em>git init</em>, puedes indicarle al repositorio qu√© usuario de GitHub o GitLab va a realizar los commits. Esto se hace as√≠:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git --config user.name "Mi-nombre-de-usuario"
$ git --config user.email "Mi-email"
</code></pre></div></div>

<p>Para comprobar que la informaci√≥n es correcta, simplemente teclea:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git --config list
</code></pre></div></div>

<h5 id="antes-de-continuar-no-te-olvides-de-gitignore">¬°Antes de continuar! No te olvides de .gitignore</h5>

<p>Una √∫ltima cosita antes de describir c√≥mo es el trabajo cotidiano con git y qu√© significa todo eso de los commits.</p>

<p>Esa cosita es sobre el archivo <strong><em>.gitignore</em></strong>. Es un archivo muy importante que deber√≠a estar en el directorio ra√≠z de tu proyecto. Si no existe, cr√©alo. Ten en cuenta que en los sistemas GNU/Linux y Mac, los archivos cuyo nombre empiezan por un punto se consideran ocultos, por lo que es posible que el archivo est√© ah√≠ sin que lo veas.</p>

<p>Ese archivo es muy importante porque contiene una lista de todas las cosas que no se deben subir al repositorio remoto. Esto incluye, entre otros:</p>

<ul>
  <li>
    <p>Los archivos de configuracion. Es habitual en una aplicaci√≥n web tener un archivo de configuraci√≥n (llamado config.php o algo parecido) con un pu√±ado de variables donde se guarda el host de la base de datos, el usuario y la contrase√±a para ese host, el nombre de la base de datos, etc. Y, vamos a ver, ¬øde verdad quieres que cualquiera que acceda a tu repositorio de GitHub o GitLab vea esa informaci√≥n?</p>

    <p>Adem√°s del problema de seguridad que puede suponerte (sobre todo si, como el 99% de los desarrolladores, usas el acceso root a tu servidor local de bases de datos mientras est√°s desarrollando un nuevo proyecto), es que no tiene sentido subir esa informaci√≥n al repositorio remoto, porque ser√° diferente en cada servidor donde la aplicaci√≥n se ponga en producci√≥n.</p>

    <p>Lo que s√≠ suele hacerse es crear un archivo de configuraci√≥n de ejemplo (algo como config-example.php), donde se muestre la estructur que debe tener config.php pero se dejen en blanco los valores de las variables. Ese archivo s√≠ que puede sincronizarse con el resto del c√≥digo y subirse a GitHub o GitLab.</p>
  </li>
  <li>
    <p>Archivos de recursos que no forman parte de la aplicaci√≥n. Imagina que est√°s programando una aplicaci√≥n web para una biblioteca. Esa aplicaci√≥n usa algunas im√°genes para construir sus vistas (por ejemplo, una hermosa fotograf√≠a de un libro antiguo para el encabezamiento). Esas im√°genes <strong>s√≠</strong> forman parte de la aplicaci√≥n y <strong>s√≠</strong> deben subirse al repositorio remoto.</p>

    <p>Pero imagina que, como es l√≥gico, para probar la aplicaci√≥n has creado un mont√≥n de libros falsos en tu base de datos local. Cada vez que a√±ades un libro falso, le asignas una imagen de la portada (falsa tambi√©n), que la aplicaci√≥n almacenar√° en alg√∫n directorio del servidor local. Esas im√°genes forman parte de los datos de prueba, no de la propia aplicaci√≥n, y, por tanto <strong>no</strong> deber√≠an subirse a GitHub ni GitLab. El directorio completo donde almacenes esas imagenes deber√≠a incluirse en .gitignore.</p>

    <p>Si no lo haces as√≠, llenar√°s el repositorio remoto de basurilla y, adem√°s, har√°s que ocupe mucho m√°s espacio del necesario, hasta el extremo que una clonaci√≥n del repositorio puede tardar varias horas y ocupar muchos gigabytes. Ten en cuenta que el repositorio no solo contiene el estado actual del proyecto, sino tambi√©n <em>todos los estados anteriores</em>, lo que incluye todas las im√°genes de libros falsos que hayas podido a√±adir alguna vez durante el desarrollo.</p>

    <p>Esto no solo es aplicable a im√°genes, sino a cualquier otro recurso que use la aplicaci√≥n y que no forme parte de la propia aplicaci√≥n: sonidos, fuentes tipogr√°ficas, v√≠deos, etc.</p>
  </li>
  <li>
    <p>Bibliotecas de terceros. A menudo, recurrimos a bibliotecas de terceros para usarlas en nuestra aplicaci√≥n. Incluir ese c√≥digo en nuestro repositorio nos puede meter en un embrollo legal (m√≠rate bien la licencia de uso de <em>todas</em> las bibliotecas que vayas a utilizar) y, adem√°s, nos puede hacer engordar innecesariamente el repositorio. Tendr√°s que valorar una a una si es conveniente incluir determinada librer√≠a o no. Las librer√≠as no incluidas deber√°n ser instaladas manualmente cuando la aplicaci√≥n se despliegue en un servidor, lo cual deber√°s explicar muy bien en la documentaci√≥n.</p>

    <p>Por ejemplo, en el caso de Laravel, se aconseja no incluir la carpeta ‚Äúvendor‚Äù en el repositorio remoto. Es decir, hay que a√±adir la carpeta ‚Äúvendor‚Äù a .gitignore antes de la primera sincronizaci√≥n. En ‚Äúvendor‚Äù se encuentran todas las librer√≠as de terceros que usa Laravel. Entonces, para desplegar esta aplicaci√≥n en un servidor, ¬øde d√≥nde sacamos todas esas librer√≠as? F√°cil: cuando despleguemos el c√≥digo en un servidor, solo tendremos que ejecutar ‚Äúcomposer update‚Äù en el directorio ra√≠z de la aplicacion, y el propio composer se encargar√° de instalar las librer√≠as.</p>
  </li>
</ul>

<h2 id="83-flujo-de-trabajo-b√°sico-con-git">8.3. Flujo de trabajo b√°sico con Git</h2>

<p>Bueno, pues ya tenemos nuestros repositorios inicializados, conectados con el remoto y con el archivo .gitignore a punto. ¬øQu√© hacemos ahora?</p>

<p>Muy f√°cil: ponernos a trabajar como si git no existiera.</p>

<p>Y luego, cuando des por finalizada una parte de la aplicaci√≥n (un m√©todo, una clase, una funcionalidad concreta: t√∫ decides cada cu√°nto tiempo haces esto), pasarla a la <strong><em>Staging Area</em></strong>.</p>

<h3 id="831-un-momento-staging-qu√©eee">8.3.1. Un momento‚Ä¶ ¬øStaging qu√©eee?</h3>

<p>La <strong><em>Staging Area</em></strong> es como la pista de despegue de Git.</p>

<p>La idea es la siguiente: Git no quiere sincronizar tus archivos con el repositorio remoto de forma autom√°tica (como hacen las plataformas para el p√∫blico general, como Google Drive o Dropbox), porque sabe que los programadores producimos mucha basura al cabo del d√≠a.</p>

<p>Si cada vez que escribimos una basurilla, Git la sincronizara con el remoto, el resto de personas del proyecto estar√≠an recibiendo nuestra basura de forma permanente. Y nosotros la de esas personas.</p>

<p>Y esparcir basura no es una buena pol√≠tica.</p>

<p>As√≠ que Git quiere que seas muy consciente de cu√°ndo quieres sincronizar algo, y de qu√© es lo que quieres sincronizar. Quiere que te tomes el trabajo (que tampoco es para tanto, la verdad) de tomarte medio minuto de tu tiempo para decirle: ‚Äúeh, Git, he estado trabajando en estos dos archivos esta ma√±ana y creo que <em>ahora</em> ya no son una basura‚Äù.</p>

<p>Para eso sirve la Staging Area.</p>

<p>Tienes que pasar los archivos que ya no son una basura a la Staging Area. Y tienes que hacerlo t√∫, generalmente cuando hayas terminado una funcionalidad y la hayas probado adecuadamente. Lo bastante como para que no te averg√ºence que otras personas del equipo reciban tu c√≥digo.</p>

<p>Para a√±adir archivos a la Staging Area se usa el comando git add, as√≠:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add archivo1 archivo2 archivo3 ...
</code></pre></div></div>

<p>Se pueden a√±adir directorios completos:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add directorio1 directorio2 ...
</code></pre></div></div>

<p>Y tambi√©n se pueden usar s√≠mbolos comod√≠n, como el asterisco. De modo que, si est√°s muy, pero que muy seguro/a de que todos los archivos que han andado tocando desde el √∫ltimo commit est√°n en un estado aceptable, puedes hacer esto para que git se encargue de <em>a√±adir todos los archivos modificados recientemente a la Staging Area</em>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add *
</code></pre></div></div>

<p>Por fin, cuando tengas una o varias cosas preparadas en la Staging Area‚Ä¶ Bueno, entonces llega el momento de hacer un <strong>commit</strong>.</p>

<h3 id="832-hacer-commit">8.3.2. Hacer commit</h3>

<p>Un <strong>commit</strong> (que podr√≠amos traducir por ‚Äúperpetrar‚Äù, ni m√°s ni menos) consiste en empaquetar todos los cambios de la Staging Area para enviarlos a otro repositorio, normalmente el repositorio remoto.</p>

<p>El decir, con el commit le decimos a Git: ‚Äúquiero que prepares todo el c√≥digo que te he puesto en la Staging Area a para enviarlo a GitHub‚Äù (o a d√≥nde sea).</p>

<p>Se puede hacer un commit por cada peque√±a modificaci√≥n que introducimos en la Staging Area, o se pueden preparar muchos archivos en la Staging Area y luego empaquetarlos en un √∫nico mega-commit. Eso lo decid√≠s t√∫ y tu equipo de desarrollo. Pero suele ser buena idea hacer commits de funcionalidades o tareas individuales.</p>

<p>Es decir, si esta ma√±ana he estado trabajando en dos funcionalidades, ‚ÄúA√±adir usuarios nuevos‚Äù y ‚ÄúModificar la vista de edici√≥n de usuarios‚Äù, es mejor que haga dos commits separados para cada una de esas funcionalidades.</p>

<p>Esto es as√≠ porque, a cada commit, le tengo que a√±adir <strong><em>obligatoriamente</em></strong> un texto descriptivo donde indique qu√© cambios estoy subiendo con ese commit.</p>

<p>El comando para hacer un commit es:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit -m "Mensaje"
</code></pre></div></div>

<p>Ahora saco mi bola de cristal y te digo: no tardar√°s ni una semana en empezar a hacer commits cuyo texto descriptivo ser√° algo como ‚Äúaslkdaslkjda‚Äù, ‚Äúaaa‚Äù, ‚Äúyoqu√©s√©‚Äù. Eso es una p√©sima idea. Antes o despu√©s, alguien del equipo meter√° la pata, subir√° un cambio indebido y todo el repositorio explotar√°. Entonces, intentar√©is regresar a un estado en el que el c√≥digo a√∫n funcionaba, pero encontrar√©is un mont√≥n de commits con explicaciones incomprensibles como ‚Äúaslkdaslkjda‚Äù, ‚Äúaaa‚Äù y ‚Äúyoqu√©s√©‚Äù. Y sudar√©is tinta para descubrir cu√°l fue el commit explosivo.</p>

<p>Los commits deben llevar textos descriptivos breves pero informativos. Por ejemplo: ‚ÄúArreglo el fallo del id de usuario inexistente al actualizar foto de perfil‚Äù o ‚ÄúElimino el bot√≥n de modificar de la vista de libros‚Äù.</p>

<p>Pero, ¬°ojo!, hacer commit <strong>no sube los archivos al repositorio remoto</strong>. Todav√≠a no. Recuerda que Git quiere que est√©s muy seguro/a de que subes lo que realmente tienes que subir, as√≠ que a√∫n te falta un √∫ltimo paso: hacer <strong><em>push</em></strong>.</p>

<h3 id="833-subir-el-commit-hacer-push">8.3.3. Subir el commit: hacer push</h3>

<p>El √∫ltimo paso para enviar nuestros cambios locales al repositorio remoto (t√≠picamente, GitHub o GitLab) consiste en hacer <strong><em>push</em></strong>. Es decir, literalmente, ‚Äúempujar‚Äù los cambios al repositorio remoto.</p>

<p>La operaci√≥n <em>push</em> enviar√° todos los commits que a√∫n no se hayan enviado al repositorio remoto. A partir de ese momento, estar√°n disponibles para el resto de miembros del equipo. Pero solo a partir de ese momento.</p>

<p>Para hacer push, basta con escribir:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git push
</code></pre></div></div>

<p>Lo normal es que el repositorio remoto te pida tu nombre de usuario y contrase√±a, pero eso depender√° de si el acceso a ese repositorio est√° autenticado o no. Por supuesto, tanto GitHub como GitLab te solicitar√°n que te identifiques.</p>

<h3 id="834-bajarnos-la-√∫ltima-versi√≥n-del-c√≥digo">8.3.4. Bajarnos la √∫ltima versi√≥n del c√≥digo</h3>

<p>Si podemos subir nuestros cambios al repositorio remoto, tendremos que tener una forma de bajar los cambios del resto de miembros del equipo, ¬øverdad?</p>

<p>Por supuesto, existe un comando para ello. Es este:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git pull
</code></pre></div></div>

<p>Es recomendable hacer pull antes de hacer push, por si alguien a tocado alguno de los archivos que nosotros pretendemos subir. En ese caso, Git nos avisar√° del conflicto y nos ayudar√° a resolverlo (m√°s adelante veremos c√≥mo). No podremos hacer push hasta resolver ese conflicto, para evitar p√©rdidas de c√≥digo.</p>

<h3 id="835-resumi√©ndolo-todo-diagrama-del-flujo-de-trabajo-habitual">8.3.5. Resumi√©ndolo todo: diagrama del flujo de trabajo habitual</h3>

<p>Si resumimos lo dicho hasta ahora, tenemos que, despu√©s de inicializar el repositorio (cosa que hay que hacer solo una vez), el trabajo cotidiano con Git consiste en:</p>

<ol>
  <li>Desarrollar nuestra aplicaci√≥n con normalidad.</li>
  <li>Cuando terminamos de hacer algo, a√±adirlo a la Staging Area (git add).</li>
  <li>Cada cierto tiempo, o cuando acabamos una funcionalidad, empaquetar todos los cambios que esperan en la Staging Area en un commit (git commit).</li>
  <li>Bajarnos los commits del resto de miembros del equipo (git pull)</li>
  <li>Subir nuestros commits al repositorio remoto (git push)</li>
</ol>

<p>Podemos verlo gr√°ficamente en el siguiente esquema. Las tres primeras columnas (workspace, Staging Area y Local Repo) est√°n en nuestro ordenador de trabajo. El repositorio remoto (Remote Repo) est√° en un servidor.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Workspace   Staging area (INDEX)  Local repo (HEAD)   Remote repo
    |             |                     |                  |
    | git add ‚Üí   |                     |                  |
    |             |    git commit ‚Üí     |                  |
    |             |                     |    git push ‚Üí    |
    |             |                     |                  |
    |             |                     |                  |
    | ‚Üê ‚Üê ‚Üê ‚Üê ‚Üê   |     ‚Üê ‚Üê ‚Üê ‚Üê ‚Üê       |   ‚Üê git pull     |
    |             |                     |                  |
    |             |                     |                  |
</code></pre></div></div>

<p>Un √∫ltimo apunte: te voy a chivar un comando muy √∫til de git cuando no est√°s muy seguro de qu√© archivos has estado tocando √∫ltimamente (¬øa qui√©n no le ha pasado eso? ¬øEh?). Este comando te resumir√° el estado de tu repositorio local, indic√°ndote qu√© archivos han sido modificados (pero no est√°n en la Staging Area), qu√© archivos est√°n preparados en la Staging Area (pero no en un commit) y, por supuesto, qu√© commits est√°n hechos pero a√∫n sin subir.</p>

<p>Todo eso, gratis y tecleando este humilde comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git status
</code></pre></div></div>

<p>¬øEs potente o no es potente este Git? Pues a√∫n no has visto nada.</p>

<h2 id="84-algunas-cosillas-avanzadas-sobre-git">8.4. Algunas cosillas avanzadas sobre git</h2>

<p>Solo con lo que hemos visto hasta ahora (add, commit, push y pull) ya tienes suficiente para empezar a funcionar con git. Luego, conforme te surjan otras necesidades, puedes ir curioseando por internet para profundizar en ciertos aspectos.</p>

<p>Una de esas ‚Äúnecesidades‚Äù que te surgir√°n antes o despu√©s consiste en lo siguiente:</p>

<p>Imag√≠nate la escena: un d√≠a llegas a clase despu√©s de haberte acosatado a las tantas trabajando en tu proyecto. Antes de acostarte hiciste un push para subir todos tus cambios y puedes jurar que todo funcionaba perfectamente. Pero ahora, t√∫ y el resto de miembros de tu equipo acab√°is de hacer pull y‚Ä¶ ¬°BUM! El proyecto entero salta por los aires. El homepage no carga. Otras rutas que <em>est√°s seguro</em> de que funcionaban hace unas horas ahora no responden.</p>

<p>¬øQu√© narices ha pasado?</p>

<p>Tranquilidad: ah√≠ est√° Git para sacarte del embrollo.</p>

<h3 id="841-houston-tenemos-un-problema">8.4.1. Houston, tenemos un problema</h3>

<p>Las causas de un desastre como ese pueden ser tantas que, en la pr√°ctica, es como si fueran infinitas. Un problema con el proxy, un merge mal hecho, una desconfiguraci√≥n de uno de los servidores locales que ha afectado a alg√∫n archivo clave, un error de alg√∫n miembro del equipo que ha sobreescrito cientos de archivos con versiones incorrectas‚Ä¶ Infinitas, ya te digo.</p>

<p>No suele compensar el esfuerzo de buscar la raz√≥n √∫ltima de lo que ha ocurrido, salvo que os pase esto con cierta regularidad: entonces s√≠ que es cuesti√≥n de preocuparse.</p>

<p>La mayor√≠a de las veces es un problema puntual que puede resolverse de un modo muy simple: volviendo a la √∫ltima versi√≥n estable.</p>

<p>XXX</p>

<h3 id="842-regreso-al-pasado-c√≥mo-revertir-cambios">8.4.2. Regreso al pasado: c√≥mo revertir cambios</h3>

<p>-Deshacer cambios</p>

<p>git log (muestra historial de cambios)
git log ‚Äìoneline (muestra historial de cambios simplificado)</p>

<h3 id="843-cuando-dos-personas-se-encaprichan-del-mismo-archivo">8.4.3. Cuando dos personas se encaprichan del mismo archivo</h3>

<p>-Resolver conflictos. Merge</p>

<h3 id="844-proyectos-que-se-complican-c√≥mo-crear-ramas">8.4.4. Proyectos que se complican: c√≥mo crear ramas</h3>

<p>-Ramas?</p>

:ET