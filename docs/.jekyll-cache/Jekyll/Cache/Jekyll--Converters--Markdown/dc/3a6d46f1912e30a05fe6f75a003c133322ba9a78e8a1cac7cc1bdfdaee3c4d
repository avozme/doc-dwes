I",º<h1 id="8-otras-tecnolog√≠as">8. Otras tecnolog√≠as</h1>

<p>En esta secci√≥n vamos a hacer un repaso r√°pido a otros lenguajes para desarrollo web del lado del servidor diferentes de PHP.</p>

<p>Ser√° solo una pasada superficial, para que te hagas una idea de qu√© aspecto tienen estos lenguajes y veas que, en lo sustancial, no difieren mucho unos de otros. Esto quiere decir que, si te manejas bien con PHP, podr√°s pasarte a cualquiera de estos lenguajes con muy poco esfuerzo y en solo unos d√≠as.</p>

<h2 id="81-common-gateway-interface-cgi">8.1. Common Gateway Interface (CGI)</h2>

<p>CGI es la soluci√≥n m√°s antigua para el desarrollo web en el lado del servidor.</p>

<p>En la d√©cada de 1990, cuando se empez√≥ a pensar en la posibilidad de crear p√°gina din√°micas generadas por el servidor a partir de los recursos del mismo (t√≠picamente, una base de datos), los primeros intentos utilizaron las tecnolog√≠as presentes en ese momento en los servidores web.</p>

<p>Todos los servidores ten√≠an un compilador de C/C++, as√≠ que alguien pens√≥: ¬øpor qu√© no escribimos las aplicaciones web en C/C++, las compilamos y hacemos que el ejecutable se pueda invocar v√≠a web?</p>

<p>Para lograr esto √∫ltimo, se utiliz√≥ CGI (Common Gateway Interface).</p>

<p>CGI es una interfaz entre los servidores web y las aplicaciones que se ejecutan en el servidor. Estas aplicaciones pueden estar construidas en cualquier lenguaje (no solo C/C++). A CGI, eso le da igual. Solo define la forma de transferir informaci√≥n en ambos sentidos.</p>

<p>La figura siguiente muestra la forma en la que se ejecutan programas en el servidor a trav√©s de CGI. Si lo observas con atenci√≥n, ver√°s que no difiere demasiado de la forma en la que trabaja PHP, porque cualquier petici√≥n tiene 4 pasos:</p>
<ol>
  <li>Se recibe la petici√≥n de un cliente web.</li>
  <li>El servidor web recibe la peticion y, a trav√©s del interfaz CGI, le pide al sistema operativo que ejecute el programa correspondiente.</li>
  <li>La salida del programa se redirige al servidor web. De esto se encarga, nuevamente, el interfaz CGI.</li>
  <li>El servidor devuelve al cliente el resultado de la ejecuci√≥n del programa.</li>
</ol>

<p>XXX esquema</p>

<h3 id="811-entonces-en-qu√©-se-diferencia-cgi-de-php">8.1.1. Entonces, ¬øen qu√© se diferencia CGI de PHP?</h3>

<p>Lo primero, CGI no es un lenguaje de programaci√≥n. Eso ya lo hemos dicho. Es un <strong><em>interfaz</em></strong> entre el servidor web y el sistema operativo para poder ejecutar cualquier programa escrito en cualquier lenguaje a trav√©s de la web.</p>

<p>Puede parecer una soluci√≥n perfecta, ¬øverdad? Pero, si fuera as√≠, ¬øpor qu√© no se sigue usando de forma masiva? ¬øPor qu√© se abandon√≥ en favor de PHP u otros de los lenguajes que vamos a ver m√°s adelante?</p>

<p>La respuesta breve es: CGI tiene un serio problema de rendimiento.</p>

<p>Cada vez que se recibe una petici√≥n de un cliente, se crea un nuevo proceso en el servidor para ejecutar el programa en cuesti√≥n. Este proceso necesita un espacio de memoria para colocar su c√≥digo fuente y sus datos, y esto recursos solo se liberan cuando el servidor termina de responder al cliente. Esta creaci√≥n de procesos independientes implica una carga importante para el servidor, por lo cual esta modalidad de generaci√≥n de contenido din√°mico no es muy escalable.</p>

<p>Por su parte, PHP (y otras soluciones que veremos m√°s adelante) no crean un proceso independiente para cada petici√≥n recibida, sino que un mismo macro-proceso se encarga de gestionarlas todas. En t√©rminos de escalabilidad, esta opci√≥n es mucho mejor. As√≠ que, cuando los servidores empezaron a recibir muchas visitas simult√°neas, CGI comenz√≥ a abandonarse. Sencillamente, ning√∫n servidor pod√≠a soportar grandes vol√∫menes de peticiones.</p>

<p>Existen algunas alternativas para solucionar este problema de CGI, como mantener un s√≥lo proceso CGI en memoria que se encargue de procesar todas las peticiones (t√©cnica conocida como FastCGI y que, de hecho, se sigue utilizando en la actualidad, incluso para ejecutar PHP en el servidor), pero resulta m√°s complejo de configurar y operar, e implica algunos problemas de seguridad. En cualquier caso, estos detalles de configuraci√≥n del servidor son cosas que competen m√°s a los administradores de sistemas que a los desarrolladores.</p>

<h2 id="82-perl">8.2. Perl</h2>

<p>A partir de este punto, veremos varios lenguajes alternativos a PHP (es decir, su ‚Äúcompetencia‚Äù) siguiendo siempre el mismo esquema:</p>
<ul>
  <li>Primero, enumeraremos las caracter√≠sticas y filosofia del lenguaje.</li>
  <li>Luego explicaremos a grandes rasgos c√≥mo hay que configurar el servidor para poder usar ese lenguaje para desarrollo web.</li>
  <li>Despu√©s mostraremos la sintaxis b√°sica del lenguaje.</li>
  <li>Por √∫ltimo, escribiremos dos ejemplos completos en cada lenguaje: un sencillo ‚Äúhola, mundo‚Äù y un programa algo m√°s complejo que lanza una validaci√≥n de login mediante ajax. En este segundo caso, la parte del cliente ser√° siempre la misma, y solo cambiaremos la parte del servidor. Eso te permitir√° apreciar las diferencias entre unos lenguajes y otros. Enseguida te dar√°s cuenta de que esas diferencias son m√≠nimas.</li>
</ul>

<h3 id="821-caracter√≠sticas-del-lenguaje-perl">8.2.1. Caracter√≠sticas del lenguaje Perl</h3>

<p>Fecha de aparici√≥n: 1987.</p>

<p>Perspectivas:</p>
<ul>
  <li>Uso decreciente.</li>
  <li>Apto para tareas peque√±as y r√°pidas.</li>
  <li>Cuenta con desarrolladores muy fieles y experimentados. Documentaci√≥n muy extensa.</li>
  <li>Soporte amplio en cualquier servidor.</li>
</ul>

<p>Filosof√≠a de Perl:</p>
<ul>
  <li>Versi√≥n mejorada del shell scripting de Unix.</li>
  <li>Pensado para procesamiento r√°pido de archivos de texto y automatizaci√≥n de tareas de administraci√≥n del sistema.</li>
  <li>Favorece la programaci√≥n √°gil, r√°pida y sucia de scripts.</li>
  <li>√ânfasis en las expresiones regulares.</li>
  <li>Multiparadigma.</li>
  <li>En combinaci√≥n con CGI, se populariz√≥ para aplicaciones web antes de la aparici√≥n de PHP.</li>
</ul>

<h3 id="822-configuraci√≥n-necesaria-en-el-servidor">8.2.2. Configuraci√≥n necesaria en el servidor</h3>

<p>Para utilizar Perl en un servidor Apache o similar, necesitaremos:</p>

<ol>
  <li>Instalar el int√©rprete Perl (usr/bin/perl).</li>
  <li>Activar los m√≥dulos perl y/o cgi de Apache y configurar el handler para CGI.</li>
  <li>Instalar m√≥dulos Perl adicionales para acceso a bases de datos, etc.</li>
</ol>

<p>Se puede ejecutar el int√©rprete Perl de forma nativa en Apache, o bien hacerlo a trav√©s de CGI. Lo primero es m√°s dif√≠cil de configurar y raramente se encuentra en hostings web compartidos.</p>

<h3 id="823-sintaxis-b√°sica-de-perl">8.2.3. Sintaxis b√°sica de Perl</h3>

<p>Las variables en Perl no se declaran, tienen tipado din√°mico y son globales por defecto.</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$var</span> <span class="o">=</span> <span class="nv">valor</span><span class="p">;</span>
<span class="k">print</span> <span class="p">"</span><span class="s2">La variable var vale </span><span class="si">$variable</span><span class="p">";</span>
</code></pre></div></div>

<p>Algunos operadores:</p>

<ul>
  <li>Comparaci√≥n: lt, gt, le, ge, eq, ne‚Ä¶</li>
  <li>Asignaci√≥n: =</li>
</ul>

<p>Algunas estructuras de control:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="nv">condicion</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">Acciones</span>
<span class="p">}</span>


<span class="k">if</span> <span class="p">(</span><span class="nv">condicion</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">Acciones</span><span class="o">-</span><span class="mi">1</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
  <span class="nv">Acciones</span><span class="o">-</span><span class="mi">2</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="824-entrada--salida">8.2.4. Entrada / salida</h3>

<p>Entrada de datos est√°ndar:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chop</span> <span class="p">(</span> <span class="nv">$variable</span> <span class="o">=</span> <span class="o">&lt;</span><span class="bp">STDIN</span><span class="o">&gt;</span> <span class="p">);</span>
</code></pre></div></div>

<p>Lectura de datos desde un formulario HTML:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nv">CGI</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$cgi</span> <span class="o">=</span> <span class="nv">CGI</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$username</span> <span class="o">=</span> <span class="nv">$cgi</span><span class="o">-&gt;</span><span class="nv">param</span><span class="p">("</span><span class="s2">username</span><span class="p">");</span>
</code></pre></div></div>

<p>Salida:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span> <span class="p">"</span><span class="s2">cadena </span><span class="si">$variable</span><span class="s2"> cadena...</span><span class="p">";</span> 
</code></pre></div></div>

<h3 id="825-bibliotecas-funciones-y-clases">8.2.5. Bibliotecas, funciones y clases</h3>

<p>Para utilizar una biblioteca o <strong><em>package</em></strong>, como se denominan en Perl, se emplea la palabra <strong>use</strong>:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nv">nombre</span><span class="o">-</span><span class="nv">biblioteca</span><span class="p">;</span>
</code></pre></div></div>

<p>Las bibliotecas se empaquetan en archivos con extensi√≥n .pm (<strong><em>Perl Modules</em></strong>). Dentro de ellas, puede haber una colecci√≥n de funciones o m√©todos que se declaran as√≠:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">package</span> <span class="nv">nombre</span><span class="o">-</span><span class="nv">biblioteca</span><span class="p">;</span>

<span class="nv">Sub</span> <span class="nv">nombre</span><span class="o">-</span><span class="nv">funcion</span> <span class="p">(</span><span class="nv">argumentos</span><span class="p">)</span> <span class="p">{</span>
   <span class="nv">Acciones</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Estas funciones pueden usarse desde fuera de la biblioteca con esta sintaxis:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nv">nombre</span><span class="o">-</span><span class="nv">biblioteca</span><span class="p">;</span>

<span class="nv">nombre</span><span class="o">-</span><span class="nn">biblioteca::</span><span class="nv">nombre</span><span class="o">-</span><span class="nv">funcion</span><span class="p">(</span><span class="nv">argumentos</span><span class="p">);</span>
</code></pre></div></div>

<p>Los <strong><em>packages</em></strong> tambi√©n pueden usarse para construir clases (o algo parecido) de las que luego se pueden instanciar objetos. M√°s o menos as√≠:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">package</span> <span class="nv">nombre</span><span class="o">-</span><span class="nv">de</span><span class="o">-</span><span class="nv">la</span><span class="o">-</span><span class="nv">clase</span><span class="p">;</span>

  <span class="k">sub </span><span class="nf">new</span> <span class="p">{</span>
      <span class="c1"># Este es el m√©todo constructor</span>
      <span class="k">my</span> <span class="nv">$self</span> <span class="o">=</span> <span class="p">{};</span>      <span class="c1"># Array para los atributos</span>
      <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">VAR1</span><span class="p">}</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1"># Un atributo</span>
      <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">VAR2</span><span class="p">}</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>  <span class="c1"># Otro atributo</span>
  <span class="p">}</span>

  <span class="k">sub </span><span class="nf">otro</span><span class="p">-m√©todo{</span>
       <span class="c1"># Aqu√≠ van el resto de m√©todos de la clase</span>
  <span class="p">}</span>
  <span class="k">sub </span><span class="nf">DESTROY</span> <span class="p">{</span>
       <span class="c1"># M√©todo destructor</span>
  <span class="p">}</span>
  <span class="mi">1</span>    <span class="c1"># Para que el int√©rprete Perl no se queje al interpretar este archivo</span>
</code></pre></div></div>

<p>Como puedes observar, Perl est√° lleno de peculiaridades que muchos consideran anticuadas o, como m√≠nimo, poco elegantes. Observa si no la forma que tiene de crear los atributos de instancia, los caprichosos nombres de los m√©todos (a veces en min√∫scula, a veces en may√∫scula) o la necesidad de terminar el <strong><em>package</em></strong> con un 1 para que el int√©rprete Perl lo considere un script v√°lido.</p>

<p>Por √∫ltimo, para instanciar un objeto de esta clase:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nv">nombre</span><span class="o">-</span><span class="nv">de</span><span class="o">-</span><span class="nv">la</span><span class="o">-</span><span class="nv">clase</span><span class="p">;</span>
<span class="nv">$objeto</span> <span class="o">=</span> <span class="nv">nombre</span><span class="o">-</span><span class="nv">de</span><span class="o">-</span><span class="nv">la</span><span class="o">-</span><span class="nv">clase</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="826-ejemplo-1-en-perl-hola-mundo">8.2.6. Ejemplo 1 en Perl: Hola mundo</h3>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/perl</span>
<span class="k">print</span> <span class="p">"</span><span class="s2">Content-type: text/html</span><span class="se">\n\n</span><span class="p">";</span>
<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;html&gt;&lt;title&gt;Hola mundo&lt;/title&gt;&lt;body&gt;</span><span class="p">";</span>
<span class="k">print</span> <span class="p">"</span><span class="s2">Hola, mundo</span><span class="p">";</span>
<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;/body&gt;&lt;/html&gt;</span><span class="p">";</span>
</code></pre></div></div>

<h3 id="827-ejemplo-2-en-perl-login-con-comprobaci√≥n-de-email-por-ajax">8.2.7. Ejemplo 2 en Perl: login con comprobaci√≥n de email por Ajax</h3>

<p>Este segundo ejemplo, como hemos explicado m√°s arriba, consistir√° en un formulario de login que comprobar√° el nombre de usuario y la contrase√±a mediante una petici√≥n Ajax.</p>

<h4 id="formulario-html">Formulario HTML</h4>

<p>El formulario de login es un simple c√≥digo HTML que ser√° id√©ntico en todos los ejemplos que veremos en el resto de este cap√≠tulo, as√≠ que solo lo mostraremos aqu√≠ por primera vez.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"loginForm"</span> <span class="na">name=</span><span class="s">"loginForm"</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">action=</span><span class="s">""</span><span class="nt">&gt;</span>
  <span class="nt">&lt;fieldset&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"username"</span><span class="nt">&gt;</span>Nombre de usuario<span class="nt">&lt;/label&gt;</span>
      <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"username"</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">class=</span><span class="s">"text"</span> <span class="na">size=</span><span class="s">"20"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"password"</span><span class="nt">&gt;</span>Contrase√±a<span class="nt">&lt;/label&gt;</span>
      <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">id=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">class=</span><span class="s">"text"</span> <span class="na">size=</span><span class="s">"20"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>Login<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/fieldset&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<h4 id="script-jquery">Script jQuery</h4>

<p>El script que lanza la petici√≥n Ajax (cuyo c√≥digo puede ir en el mismo archivo que el formulario) ser√° <strong><em>casi</em></strong> id√©ntico en todos los ejemplos: solo cambiar√° el nombre del script al que se lanza la petici√≥n.</p>

<p>En nuestro caso actual, es script lo hemos llamado <strong>login.pl</strong> (la extensi√≥n .pl denota que se trata de un script escrito en lenguaje Perl). Como es l√≥gico, en ejemplos posteriores, tendr√≠as que cambiar el nombre de ese archivo por el que corresponda (login.py si estamos usando Python, login.rb si estamos usando Ruby, etc).</p>

<p>Para no repetirnos innecesariamente, no volveremos a mostrar tampoco el c√≥digo de este script en los ejemplos sucesivos.</p>

<p>Observa que Javascript est√° esperando que el servidor responda con un JSON que puede llevar estos tres datos en su interior:</p>
<ul>
  <li>data.error: Un string con un texto de error en caso de que el usuario o la contrase√±a sean incorrectos.</li>
  <li>data.success: Un string con un texto de √©xito en caso de que el usuario y la contrase√±a sean correctos.</li>
  <li>data.userId: Un entero con el ID del usuario logueado (solo en caso de √©xito).</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">form#loginForm</span><span class="dl">"</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
    <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#username</span><span class="dl">'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">value</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Obtenemos el username</span>
    <span class="kd">var</span> <span class="nx">password</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#password</span><span class="dl">'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">value</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Obtenemos la password</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">username</span> <span class="o">&amp;&amp;</span> <span class="nx">password</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Los valores de username y password no est√°n vac√≠os</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">login.pl</span><span class="dl">"</span><span class="p">,</span> 
        <span class="na">dataType</span><span class="p">:</span> <span class="dl">"</span><span class="s2">json</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">data</span><span class="p">:</span> <span class="dl">"</span><span class="s2">username=</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">username</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&amp;password=</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">password</span><span class="p">,</span>
        <span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// El servidor ha devuelto un error de login</span>
            <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">div#loginResult</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">"</span><span class="s2">data.error: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
            <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">div#loginResult</span><span class="dl">'</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">);</span>
          <span class="p">}</span> 
          <span class="k">else</span> <span class="p">{</span>            <span class="c1">// El servidor ha hecho el login correctamente</span>
            <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">form#loginForm</span><span class="dl">'</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
            <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">div#loginResult</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">"</span><span class="s2">data.success: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">success</span> 
              <span class="o">+</span> <span class="dl">"</span><span class="s2">, data.userid: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">userid</span><span class="p">);</span>
            <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">div#loginResult</span><span class="dl">'</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="dl">"</span><span class="s2">success</span><span class="dl">"</span><span class="p">);</span>
          <span class="p">}</span> 
        <span class="p">}</span> 
      <span class="p">});</span> 
    <span class="p">}</span> 
    <span class="k">else</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">div#loginResult</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">"</span><span class="s2">Debe escribir su nombre de usuario y su contrase√±a</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">div#loginResult</span><span class="dl">'</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span> 
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">div#loginResult</span><span class="dl">'</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">();</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h4 id="script-perl-en-el-lado-del-servidor-loginpl">Script Perl en el lado del servidor (login.pl)</h4>

<p>Este ser√≠a el script en Perl que responder√≠a a la petici√≥n Ajax anterior.</p>

<p>Observa que, a pesar de la peculiar sintaxis de Perl, la estructura del algoritmo es id√©ntica a la que usar√≠amos si lo escribi√©ramos en PHP:</p>
<ol>
  <li>Recuperamos los datos del formulario (username y password)</li>
  <li>Conectamos con la base de datos</li>
  <li>Lanzamos la consulta contra la tabla de usuarios</li>
  <li>En funci√≥n del resultado de la consulta, preparamos nuestro JSON de respuesta al cliente</li>
  <li>Devolvemos el JSON al cliente</li>
</ol>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/perl -T</span>
<span class="k">use</span> <span class="nv">CGI</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">DBI</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>

<span class="c1"># read the CGI params</span>
<span class="k">my</span> <span class="nv">$cgi</span> <span class="o">=</span> <span class="nv">CGI</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$username</span> <span class="o">=</span> <span class="nv">$cgi</span><span class="o">-&gt;</span><span class="nv">param</span><span class="p">("</span><span class="s2">username</span><span class="p">");</span>
<span class="k">my</span> <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$cgi</span><span class="o">-&gt;</span><span class="nv">param</span><span class="p">("</span><span class="s2">password</span><span class="p">");</span>

<span class="c1"># connect to the database</span>
<span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="nv">DBI</span><span class="o">-&gt;</span><span class="nb">connect</span><span class="p">("</span><span class="s2">DBI:mysql:database=mydb;host=localhost;port=2009</span><span class="p">",</span>  
  <span class="p">"</span><span class="s2">mydbusername</span><span class="p">",</span> <span class="p">"</span><span class="s2">mydbpassword</span><span class="p">")</span> 
  <span class="ow">or</span> <span class="nb">die</span> <span class="nv">$</span><span class="nn">DBI::</span><span class="nv">errstr</span><span class="p">;</span>

<span class="c1"># check the username and password in the database</span>
<span class="k">my</span> <span class="nv">$statement</span> <span class="o">=</span> <span class="sx">qq{SELECT id FROM users WHERE username=? and password=?}</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$sth</span> <span class="o">=</span> <span class="nv">$dbh</span><span class="o">-&gt;</span><span class="nv">prepare</span><span class="p">(</span><span class="nv">$statement</span><span class="p">)</span>
  <span class="ow">or</span> <span class="nb">die</span> <span class="nv">$dbh</span><span class="o">-&gt;</span><span class="nv">errstr</span><span class="p">;</span>
<span class="nv">$sth</span><span class="o">-&gt;</span><span class="nv">execute</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span> <span class="nv">$password</span><span class="p">)</span>
  <span class="ow">or</span> <span class="nb">die</span> <span class="nv">$sth</span><span class="o">-&gt;</span><span class="nv">errstr</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$userID</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$sth</span><span class="o">-&gt;</span><span class="nv">fetchrow_array</span><span class="p">;</span>

<span class="c1"># create a JSON string according to the database result</span>
<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$userID</span><span class="p">)</span> <span class="p">?</span> 
  <span class="nv">qqsuccess</span> <span class="p">:</span> 
  <span class="nv">qqerror</span><span class="p">;</span>

<span class="c1"># return JSON string</span>
<span class="k">print</span> <span class="nv">$cgi</span><span class="o">-&gt;</span><span class="nv">header</span><span class="p">(</span><span class="o">-</span><span class="s">type</span> <span class="o">=&gt;</span> <span class="p">"</span><span class="s2">application/json</span><span class="p">",</span> <span class="o">-</span><span class="s">charset</span> <span class="o">=&gt;</span> <span class="p">"</span><span class="s2">utf-8</span><span class="p">");</span>
<span class="k">print</span> <span class="nv">$json</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="83-python">8.3. Python</h2>

<h3 id="831-caracter√≠sticas-del-lenguaje-python">8.3.1. Caracter√≠sticas del lenguaje Python</h3>

<p>Fecha de aparici√≥n: 1991</p>

<p>Perspectivas:</p>

<ul>
  <li>Uso creciente.</li>
  <li>Es el sustituto natural de Perl para el desarrollo r√°pido de scripts.</li>
  <li>Tambi√©n usado en grandes proyectos como alternativa a PHP.</li>
  <li>Menos extendido que PHP, pero comunidad con muchos desarrolladores profesionales (mejor relaci√≥n se√±al/ruido)</li>
  <li>Muchas bibliotecas de terceros ‚Üí flexibilidad</li>
</ul>

<p>Filosof√≠a:</p>

<ul>
  <li>Es la versi√≥n ‚Äúlimpia‚Äù de Perl. Pensado para escribir scripts de forma r√°pida y limpia.</li>
  <li>√ânfasis en la legibilidad: Python es casi pseudoc√≥digo (c√≥digo ‚Äúpythonico‚Äù ‚Üí v. ‚ÄúEl Zen de Python‚Äù)</li>
  <li>Interpretado. Tipado din√°mico. Fuertemente tipado.</li>
  <li>Expresiones regulares heredadas de Perl.</li>
  <li>Multiparadigma: imperativo, O.O., funcional.</li>
</ul>

<h3 id="832-configuraci√≥n-necesaria-en-el-servidor">8.3.2. Configuraci√≥n necesaria en el servidor</h3>

<p>XXX</p>

<p>Instalar el int√©rprete Python (/usr/bin/python). El m√°s extendido es CPhyton.
Activar los m√≥dulos python y/o cgi de Apache y configurar el handler de Apache para CGI.
Python puede funcionar de forma nativa integrado en Apache o a trav√©s de CGI.
Lo primero es m√°s r√°pido, lo segundo m√°s frecuente.
Instalar m√≥dulos adicionales (p. ej: para acceso a bases de datos) si es necesario.</p>

<h3 id="833-sintaxis-b√°sica-de-python">8.3.3. Sintaxis b√°sica de Python</h3>

<p>Las variables no se declaran obligatoriamente, tienen tipado din√°mico y son locales por defecto.
varariable = valor;
print ‚ÄúLa variable var vale %s‚Äù (variable);
Tiene muchos tipos de datos complejos predefinidos: listas, tuplas, diccionarios‚Ä¶
Algunos operadores:
Comparaci√≥n: &lt;, &gt;, &lt;=, &gt;=, ==, != 
Asignaci√≥n: =</p>

<p>Algunas estructuras de control</p>

<p>¬°El c√≥digo debe indentarse OBLIGATO-RIAMENTE!</p>

<p>La indentaci√≥n marca el final del bloque</p>

<p>while condicion:
  Acciones</p>

<p>if condicion:
  Acciones-1
else:
  Acciones-2</p>

<p>Entrada / salida</p>

<h3 id="834-entrada--salida">8.3.4. Entrada / Salida</h3>
<p>variable = raw_input(‚ÄúTexto‚Äù)</p>

<h1 id="lectura-de-datos-de-un-formulario-html">Lectura de datos de un formulario HTML:</h1>
<p>import cgi
form = cgi.FieldStorage()
campo = form[‚Äúcampo‚Äù].value</p>

<h1 id="salida">Salida:</h1>
<p>print ‚Äúcadena %s cadena %s ‚Ä¶‚Äù (variable1, variable2)</p>

<h3 id="835-bibliotecas-funciones-y-clases">8.3.5. Bibliotecas, funciones y clases</h3>

<p>Subprogramas</p>
<h1 id="comentarios">Comentarios</h1>
<p>def nombre-rutina (argumentos):
   Acciones
   [return valor1, varlor2‚Ä¶]</p>

<p>M√≥dulos
import modulo</p>

<h3 id="836-ejemplo-1-en-python-hola-mundo">8.3.6. Ejemplo 1 en Python: Hola mundo</h3>

<p>#!/usr/bin/python
print ‚ÄúContent-type: text/html\n\n‚Äù
print ‚Äú&lt;html&gt;&lt;body&gt;‚Äù
print ‚Äú&lt;h1&gt;Hola, mundo&lt;/h1&gt;‚Äù
print ‚Äú&lt;/body&gt;&lt;/html&gt;‚Äù</p>

<h3 id="837-ejemplo-2-en-python-login-con-comprobaci√≥n-de-email-por-ajax">8.3.7. Ejemplo 2 en Python: login con comprobaci√≥n de email por Ajax</h3>

<p>url: ‚Äú/cgi-bin/login.py‚Äù, // URL of the Python script</p>

<p>Script Python en el lado del servidor (login.py)
#!/usr/bin/python</p>

<p>import cgi
import MySQLdb</p>

<h1 id="read-the-cgi-params">read the CGI params</h1>
<p>form = cgi.FieldStorage()
usuario = form[‚Äúusername‚Äù].value;
password = form[‚Äúpassword‚Äù].value;</p>

<p>print ‚ÄúUsuario = ‚Äú, usuario, ‚Äú Pass = ‚Äú, password</p>

<h1 id="check-the-username-and-password-in-the-database">check the username and password in the database</h1>
<p>db=MySQLdb.connect(host=‚Äôlocalhost‚Äô,user=‚Äôroot‚Äô,passwd=‚Äôroot‚Äô,db=‚Äôperl‚Äô)
cursor=db.cursor()
num_rows = cursor.execute(‚ÄúSELECT id FROM users WHERE username = ‚Äò%s‚Äô AND password = ‚Äò%s‚Äô;‚Äù, (usuario, password))
userid = cursor.fetchone()</p>

<h1 id="return-json-string">return JSON string</h1>
<p>print ‚ÄúContent-type: application/json\n‚Äù
if num_rows == 0:
   print ‚Äú{‚Äòerror‚Äô: ‚ÄòUsuario o contrase√±a incorrectos‚Äô}‚Äù
else:
   print ‚Äú{‚Äòsuccess‚Äô: ‚ÄòEl usuario y la contrase√±a son v√°lidos‚Äô, ‚Äòuserid‚Äô: ‚Äò%d‚Äô‚Äù, userid</p>

<h2 id="84-net">8.4. .NET</h2>

<h3 id="841-caracter√≠sticas-de-net">8.4.1. Caracter√≠sticas de .NET</h3>

<p>Fecha de aparici√≥n: 1996 (ASP) / 2002 (.NET)</p>

<p>Perspectivas:</p>

<ul>
  <li>Alternativa de Microsoft a JSP para desarrollo de grandes proyectos, donde PHP se queda peque√±o.</li>
  <li>Componentes exclusivos en el servidor y altas prestaciones.</li>
  <li>Coste m√°s elevado y problemas de seguridad end√©micos.</li>
</ul>

<p>Filosof√≠a:</p>

<ul>
  <li>Framework de c√≥digo cerrado y propietario.</li>
  <li>Tecnolog√≠a multilenguaje. Suele correr con VBS (Visual Basic Script), pero puede hacerlo con otros.</li>
  <li>Puede funcionar como PHP, embebido dentro de HTML.</li>
  <li>ASP.Net incluye controles de servidor exclusivos de Microsoft (equivalentes a los ActiveX del lado del cliente)</li>
</ul>

<h3 id="842-configuraci√≥n-necesaria-en-el-servidor">8.4.2. Configuraci√≥n necesaria en el servidor</h3>

<p>Instalar Microsoft IIS (Internet Information Server). Viene de serie en los Windows Server.
Puede ejecutarse con un m√≥dulo de apache (mono), pero es mucho m√°s lento.
Cada lenguaje tiene su servidor. Si quieres PHP, usa Apache. Si quieres JSP, usa Tomcat. Si quieres ASP, usa IIS.</p>

<h3 id="843-sintaxis-b√°sica-de-net-con-vbasic">8.4.3. Sintaxis b√°sica de .NET con VBasic</h3>

<p>Embeber el c√≥digo ASP (VBS) en HTML</p>
<html>
  <head>...</head>
  <body>
    Este texto se ha generado desde HTML<br />
    &lt;%
      response.write("Y este se ha generado con ASP")
    %
  &lt;/body
&lt;/html&gt;

No es necesario declarar las variables de tipo simple, pero puede hacerse:
Dim i,j,k As Integer

Algunos operadores:
Comparaci√≥n: &lt;, &gt;, &lt;=, &gt;=, =, &lt;&gt; 
Asignaci√≥n: =

Algunas estructuras de control
do while (condicion) 
  Acciones
loop


if (condicion) then
  Acciones-1
else 
  Acciones-2
end if

### 8.4.4. Entrada / Salida

// Leer datos de un formulario (GET):
variable = request.QueryString("campo");
// Leer datos de un formulario (POST):
variable = request.Form("campo");

// Salida:
response.write ("cadena" + variable + "cadena2"); 

### 8.4.5. Bibliotecas, funciones y clases

Subrutinas
sub nombre(parametros)
    Acciones;
end sub

Bibliotecas
&lt;% @Import Namespace="Biblioteca" %&gt;



### 8.4.6. Ejemplo 1 en VBasic: Hola mundo

&lt;%
   response.write("<html><body>")
   response.write("<h1>Hola, mundo</h1>")
   response.write("</body></html>")
%&gt;


### 8.4.7. Ejemplo 2 en VBasic: login con comprobaci√≥n de email por Ajax

url: "/ruta/al/script.asp", // URL of the ASP script

Script ASP en el lado del servidor (login.asp)

&lt;% 
# connect to the database
strDSN= "DRIVER={MySQL ODBC 3.51 driver}; Server=localhost; Database=prueba; User=root;  
         Password=xxxx"
con = Server.CreateObject("ADODB.Connection")
con.Open strDSN

# retrieve the form params
name = request.Form("username");
pass = request.Form("password");

# check username and password in the database
rs = con.Execute("SELECT id FROM users WHERE user = '" + name + 
                 "' AND password = '" + pass + "'");

# generate ouput JSON string
if (rs.eof)
   Response.Write "{'error': 'Username or password not valid'}"
else
   Response.Write "{'success': 'Authentication is OK', 'userid': "+ rs("id") + "}");

con.close
%&gt;

## 8.5. JSP

### 8.5.1. Caracter√≠sticas del lenguaje JSP

Fecha de aparici√≥n: 1995

Perspectivas: 

* Usado para proyectos grandes y complejos, donde PHP (y otros lenguajes de scripting) se quedan peque√±os.
* El lenguaje de programaci√≥n es Java, es decir, lo conoce cualquier programador. 
* Velocidad de ejecuci√≥n superior a la de otros lenguajes semi-interpretados.

Filosof√≠a:

* Adaptaci√≥n natural de Java al lado del servidor.
* Orientado a objetos. Multiplataforma. Fuertemente tipado. 
* Puede embeberse dentro de HTML, como PHP.
* El c√≥digo Java se precompila en un Servlet y se deja cargado en la memoria del servidor. Las peticiones subsiguientes se ejecutan as√≠ mucho m√°s r√°pidas.

### 8.5.2. Configuraci√≥n necesaria en el servidor

Instalar Tomcat. Es el servidor de referencia para la tecnolog√≠a JSP. 
JSP se puede ejecutar como CGI, pero resulta mucho m√°s lento.

### 8.5.3. Sintaxis b√°sica de JSP

Embeber el c√≥digo JSP en HTML
<html>
  <head>...</head>
  <body>
    Este texto se ha generado desde HTML<br />
    &lt;%
      out.println("Y este se ha generado con JSP");
    %&gt;
  </body>
</html>

Las variables se declaran como en cualquier programa Java:
int var = 5;
out.print("La variable var vale " + var);

Algunos operadores:
Comparaci√≥n: &lt;, &gt;, &lt;=, &gt;=, ==, != 
Asignaci√≥n: =

Algunas estructuras de control
while (condicion) {
  Acciones
}


if (condicion) {
  Acciones-1
}
else {
  Acciones-2
}

### 8.5.4. Entrada / Salida

// Leer datos de un formulario:
variable = request.getParameter("campo");

// Salida:
out.println ("cadena" + variable + "cadena2"); 

### 8.5.5. Bibliotecas, funciones y clases

Clases y m√©todos
class mi-clase extends clase-madre {
   public|private|protected tipo nombre(params) {
       Acciones;
   }
}

M√≥dulos
import modulo;

### 8.5.6. Ejemplo 1 en JSP: Hola mundo

&lt;%
   out.println("<html><body>");
   out.println("<h1>Hola, mundo</h1>");
   out.println("</body></html>");
%&gt;

### 8.5.7. Ejemplo 2 en JSP: login con comprobaci√≥n de email por Ajax

url: "/ruta/al/script.jsp", // URL of the JSP script

Script JSP en el lado del servidor (login.jsp)
&lt;% @page import="java.sql.*"

# connect to the database
Connection conex = null;
Statement st = null;
Class.forName("org.gjt.mm.mysql.Driver");
conex = DriverManager.getConnection("jdbc:mysql://servidor", "user", "pass");

# retrieve the form params
name = request.getParameter("username");
pass = request.getParameter("password");

# check username and password in the database
st = conex.createStatement();
ResultSet = st.executeQuery("SELECT id FROM users WHERE user = '" + name + 
            "' AND password = '" + pass + "'");

# generate ouput JSON string
if (st.EOF)
   out.println("{'error': 'Username or password not valid'}");
else
   out.println("{'success': 'Authentication is OK', 'userid':"+ ResultSet.getInt() + "}");
conex.close()
%&gt;




## 8.6. Ruby

### 8.6.1. Caracter√≠sticas del lenguaje Ruby

Fecha de aparici√≥n: 1995

Perspectivas: 

* Uso y popularidad creciente.
* Base de programadores fiel y especializada.
* Excelente relaci√≥n se√±al/ruido.
* A√∫n tiene que resolver algunas cosas:
* El lenguaje todav√≠a est√° en fase de importantes cambios.
* Tiene peor rendimiento que Python o PHP.
* Muchos m√≥dulos (gemas) est√°n mal documentados.

Filosof√≠a:

* Completa ‚Äì y verdaderamente ‚Äì orientado a objetos. Todo es un objeto.
* Admite otros paradigmas ocultos bajo los objetos. 
* ‚ÄúR√°pido y f√°cil‚Äù. Es un lenguaje divertido: de programadores para programadores. 
* Curva de aprendizaje larga pero nunca abrupta.
* Lenguaje de scripting Unix: expresiones regulares.
* En combinaci√≥n con Rails, ideal para desarrollo web MVC r√°pido y basado en prototipos.

**¬øY Ruby on Rails?**

Rails es un framework para desarrollar aplicaciones web MVC con Ruby.
Apareci√≥ en 2004 y gust√≥ tanto que otros frameworks para otros lenguajes (como CodeIgniter para PHP) copiaron su forma de trabajar:
Abundantes capas de abstracci√≥n para evitar tareas de bajo nivel, como ActiveRecord.
Scaffolding
Integraci√≥n con Ajax mediante jQuery, Prototype o Script.aculo.us
CoC &amp; DRY (Convention over Configuration &amp; Don't Repeat Yourself)


### 8.6.2. Configuraci√≥n necesaria en el servidor

Instalar el int√©rprete Ruby en el sistema.
Instalar el m√≥dulo de Ruby (mod_ruby) y/o el m√≥dulo cgi (mod_cgi) para Apache.
Configurar el manejador de Apache para CGI.
Instalar m√≥dulos adicionales para Ruby (como cgi o mysql) si son necesarios.
Como en el caso de Perl o Python, Ruby puede correr de forma nativa en Apache (m√°s r√°pido pero menos frecuente) o como script CGI.

### 8.6.3### 8.6.4. . Sintaxis b√°sica de Ruby

No es necesario declarar las variables. El tipado es din√°mico (duck)
Todo es un objeto, incluso n√∫meros enteros o valores constantes:
5.isEven?
"cadena".lenght
variable_cadena.chop!
Algunos operadores:
Comparaci√≥n: &lt;, &gt;, &lt;=, &gt;=, =, != 
Asignaci√≥n: =

Algunas estructuras de control
while condicion 
  Acciones
end


if condicion
  Acciones-1
else 
  Acciones-2
end

Sin embargo, el uso de bucles cl√°sicos casi siempre puede sustituirse por iteradores sobre objetos:

variable_array.do_each
   ...
end


num_rows.times do
   ...
end

### 8.6.4. Entrada / Salida

// Leer datos de un formulario
require "cgi"
cgi = CGI.new
variable = cgi["campo"];

// Salida:
print "cadena", variable, "cadena2", ... 

### 8.6.5. Bibliotecas, funciones y clases

class nombre_clase &lt; clase-madre
    def nombre(parametros)
       Acciones;
    end
end

Bibliotecas (gemas)
include "modulo"
require "modulo"

### 8.6.6. Ejemplo 1 en Ruby: Hola mundo

#!/usr/bin/ruby

print "Content-Type: text/html\n\n"
print "<html><body>"
print "<h1>Hola, mundo</h1>"
print "</body></html>"

### 8.6.7. Ejemplo 2 en Ruby: login con comprobaci√≥n de email por Ajax

url: "/cgi-bin/login.rb", // URL of the Ruby script

Script Ruby en el lado del servidor (login.rb)
#!/usr/bin/ruby
require "mysql"
require "cgi"

begin
    # connect to the database
    con = Mysql.new 'server', 'db-user', 'db-password', 'db-name'

    # retrieve the form params
    cgi = CGI.new
    name = cgi["username"]
    pass = cgi["password"]

    # check username and password in the database
    res = con.query("SELECT id FROM users WHERE user = '#{name}' AND password = '#{pass}'")

    # generate ouput JSON string
    print "Content-type: application/json\n\n"
    if res.num_rows == 0
       print %Q!{"error": "Username or password not valid"}!
    else
       row = res.fetch_hash
       print %Q!{"success": "Authentication is OK", "userid": "#{row['id']}" }!
    end
    con.close if con    
end



## 8.7. NodeJS

TODO

### 8.7.1. Caracter√≠sticas del lenguaje NodeJS


Fecha de aparici√≥n: XXX

Perspectivas: 

* TODO

Filosof√≠a:

* TODO

### 8.7.2. Configuraci√≥n necesaria en el servidor

TODO

### 8.7.3. Sintaxis b√°sica de NodeJS

TODO

### 8.7.4. Entrada / Salida con NodeJS

TODO

### 8.7.5. Bibliotecas, funciones y clases

TODO

### 8.7.6. Ejemplo 1 en NodeJS: Hola mundo

TODO

### 8.7.7. Ejemplo 2 en NodeJS: login con comprobaci√≥n de email por Ajax

TODO

## 8.8. Y otras tecnolog√≠as a√∫n m√°s extra√±as

Adem√°s de los lenguajes que hemos visto, existen otras alternativas a PHP para desarrollar aplicaciones web en el lado del servidor.
A continuaci√≥n mostramos una lista con alguna de estas alternativas (no est√°n todas las que son, pero s√≠ son todas las que est√°n) para quien quiera profundizar a√∫n m√°s en el asunto:

### 8.2.1. ColdFusion

ColdFusion es la alternativa de Adobe. ColdFusion es al mismo tiempo un servidor de aplicaciones y un lenguaje de programaci√≥n. Utiliza elementos &lt;...&gt; para insertar su c√≥digo en la p√°gina web y, l√≥gicamente, interacciona de manera √≥ptima con otros productos de Adobe, como Flash. Los archivos tienen extensi√≥n .cfm. Se dise√±√≥ para tener un rendimiento muy elevado (por ejemplo, aprovecha bien la presencia de m√∫ltiples procesadores en el servidor) 

### 8.2.2. WebDNA

WebDNA es un lenguaje especialmente dise√±ado para hacer scripting del lado del servidor (no como PHP, Perl, Python o Ruby, que fueron pensados para otros prop√≥sitos). Especialmente r√°pido en la interacci√≥n con bases de datos. Utiliza etiquetas encerradas entre corchetes [...] para intercalar su c√≥digo con HTML. 

### 8.2.3. Erlang

Se trata de un lenguaje para desarrollo de aplicaciones concurrentes (es decir, en las que varios procesos se ejecutan simult√°neamente, cooperando en la resoluci√≥n de un problema). Fue dise√±ado para sistemas en tiempo real. Se est√° empezando a usar en el lado del servidor cuando las aplicaciones tienen necesidades de procesamiento brutales. 

### 8.2.4. Otros SSJS

(SSJS = Server Side JavaScript): hace mucho tiempo que se especula con la posibilidad de programar scripts del lado del servidor en JavaScript. Al fin y al cabo, JS es un lenguaje dominado por cualquier desarrollador web. No existe por ahora ninguna soluci√≥n estandarizada: a veces, el JS se traduce a Java para ejecutarlo como JSP, otras veces se compila a c√≥digo nativo del servidor (como hace NodeJS), otras veces se instala un plugin en el servidor para ejecutarlo nativamente, o bien se reduce su uso s√≥lo a generar y procesar informaci√≥n JSON, etc. JS en el lado del servidor necesita siempre de librer√≠as adicionales para acceder a los recursos del servidor (p.ej: bases de datos) 
</body></html>
:ET