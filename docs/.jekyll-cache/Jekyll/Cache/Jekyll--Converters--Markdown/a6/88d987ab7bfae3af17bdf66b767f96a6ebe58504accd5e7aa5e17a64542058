I"º8<h2 id="513-sesiones-con-laravel">5.13. Sesiones con Laravel</h2>

<p>Como es l√≥gico, Laravel tambi√©n proporciona su propio sistema de manejo de variables de sesi√≥n, y este resulta mucho m√°s seguro y poderoso que el est√°ndar de PHP. En esta secci√≥n vamos a ver c√≥mo funciona y qu√© posibilidades nos ofrece.</p>

<h3 id="5131-drivers-de-sesi√≥n">5.13.1. Drivers de sesi√≥n</h3>

<p>Las sesiones de configuran en /config/sessions.php, y una de las cosas que debes configurar ah√≠ es el ‚Äúdriver‚Äù, es decir, el tipo de manejador que quieres que manipule las sesiones.</p>

<p>El driver por defecto es <strong><em>files</em></strong>. Es el m√°s sencillo y funcionar√° en casi cualquier servidor.</p>

<p>En producci√≥n, Laravel recomienda usar otros drivers llamados <strong><em>memcached</em></strong> o <strong><em>redis</em></strong> porque son m√°s r√°pidos. Ambos son daemons del sistema programados para esta tarea. Obviamente, el servidor debe soportarlos para que puedas usarlos.</p>

<p>Si necesitas seguridad adicional, sin duda tu driver es <strong><em>database</em></strong>. Esto almacenar√° dos copias de cada variable de sesi√≥n: una en un fichero y otra en una tabla especial de la base de datos. Si un atacante consiguiera manipular una de las dos variables, Laravel cerrar√° la sesi√≥n autom√°ticamente y el atacante se quedar√° con un palmo de narices. Eso s√≠, este sistema es el m√°s lento de todos porque requiere un acceso a la base de datos para cada petici√≥n al servidor.</p>

<h3 id="5132-persistencia-de-las-variables-de-sesi√≥n">5.13.2. Persistencia de las variables de sesi√≥n</h3>

<p>Laravel maneja dos tipos de variable seg√∫n su persistencia:</p>

<ul>
  <li>Variables flash: solo duran una petici√≥n y luego se autodestruyen.</li>
  <li>Variables de sesi√≥n convencionales: existen hasta que las destruimos expresamente.</li>
</ul>

<h4 id="51321-variables-flash">5.13.2.1. Variables flash</h4>

<p>Son variables de sesi√≥n que solo duran una petici√≥n y luego se autodestruyen. Se usan t√≠picamente para enviar feedback al usuario.</p>

<p>Te lo muestro con un ejemplo.</p>

<p>En el controlador:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">return</span> <span class="p">(</span><span class="s1">'login/form'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">with</span><span class="p">(</span><span class="s1">'mensaje'</span><span class="p">,</span> <span class="s1">'Usuario no reconocido'</span><span class="p">);</span>
</code></pre></div></div>

<p>En la vista:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">@</span><span class="k">if</span> <span class="p">(</span><span class="nf">session</span><span class="p">(</span><span class="s1">'mensaje'</span><span class="p">))</span>
        <span class="p">{{</span> <span class="nf">session</span><span class="p">(</span><span class="s1">'mensaje'</span><span class="p">);</span> <span class="p">}}</span>
    <span class="o">@</span><span class="k">endif</span>
</code></pre></div></div>

<h4 id="51322-variables-de-sesi√≥n-convencionales">5.13.2.2. Variables de sesi√≥n convencionales</h4>

<p>Las variables de sesi√≥n convencionales se manejan con la clase Session, que tiene un mont√≥n de m√©todos est√°ticos para crear variables, destruirlas, consultarlas, etc.</p>

<p>Los m√©todos m√°s √∫tiles son:</p>

<ul>
  <li><strong>put()</strong> -&gt; almacena una variable de sesi√≥n:</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">Session</span><span class="o">::</span><span class="nf">put</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">,</span> <span class="s1">'valor'</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><strong>push()</strong> -&gt; elimina una variable de sesi√≥n:</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">Session</span><span class="o">::</span><span class="nf">push</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><strong>get()</strong> -&gt; devuelve el valor de una variable de sesi√≥n:</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nv">$v</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">);</span>
   <span class="nv">$v</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">,</span> <span class="s1">'valor-por-defecto'</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><strong>all()</strong> devuelve todas las variables de sesi√≥n en un array:</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nv">$a</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">::</span><span class="nf">all</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">,</span> <span class="s1">'valor'</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><strong>flush()</strong> elimina todas las variables de sesi√≥n:</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">Session</span><span class="o">::</span><span class="nb">flush</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li><strong>flash()</strong> crea manualmente una variable de sesi√≥n de tipo flash:</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">Session</span><span class="o">::</span><span class="nf">flash</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">,</span> <span class="s1">'valor'</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="5133-autenticaci√≥n">5.13.3. Autenticaci√≥n</h3>

<h4 id="51331-laravel-breeze">5.13.3.1. Laravel Breeze</h4>

<p>Laravel proporciona un Starter Kit llamado <strong><em>Breeze</em></strong> que viene con todo el c√≥digo necesario para crear un sistema de autenticaci√≥n completo y seguro:</p>

<ul>
  <li>Login e inicio de sesi√≥n</li>
  <li>Registro de usuarios</li>
  <li>Recuperaci√≥n de contrase√±a olvidada</li>
  <li>Confirmaci√≥n de registro mediante email</li>
  <li>Etc.</li>
</ul>

<p>Para instalar Laravel Breeze:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ composer require laravel/breeze --dev
$ php artisan breeze:install
$ npm install
$ npm run dev
</code></pre></div></div>

<p>Laravel Breeze crea autom√°ticamente varias rutas en /routes/auth.php, entre ellas:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Routes</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s2">"/login"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">mostrar</span> <span class="n">el</span> <span class="n">formulario</span> <span class="n">de</span> <span class="n">login</span>
<span class="nc">Routes</span><span class="o">::</span><span class="nf">post</span><span class="p">(</span><span class="s2">"/login"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">procesar</span> <span class="n">el</span> <span class="n">formulario</span> <span class="n">de</span> <span class="n">login</span>
<span class="nc">Routes</span><span class="o">::</span><span class="nf">post</span><span class="p">(</span><span class="s2">"/logout"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">cerrar</span> <span class="n">la</span> <span class="n">sesi√≥n</span>
<span class="nc">Routes</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s2">"/register"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">mostrar</span> <span class="n">el</span> <span class="n">fomulario</span> <span class="n">de</span> <span class="n">registro</span>
<span class="nc">Routes</span><span class="o">::</span><span class="nf">post</span><span class="p">(</span><span class="s2">"/register"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">procesar</span> <span class="n">el</span> <span class="n">formulario</span> <span class="n">de</span> <span class="n">registro</span>
</code></pre></div></div>

<p>Tambi√©n se crean varios controladores como LoginController y RegisterContoller: est√°n en App/Http/Controllers/Auth.</p>

<p>Y se crean varias vistas, como auth/login.blade.php, register.blade.php y layouts/app.blade.php (la plantilla que usar√°n login y register)</p>

<p>Por √∫ltimo, se crea una vista HOME de ejemplo (dashboard.blade.php) a la que llegamos despu√©s de hacer login. Esa vista HOME la puedes cambiar en /app/providers/RouteServiceProvider.php</p>

<p>¬°Y listo! Solo nos queda adaptar estas vistas y controladores a nuestras necesidades.</p>

<h4 id="51331-autenticaci√≥n-y-vistas-c√≥mo-generar-c√≥digo-dependiendo-del-tipo-de-usuario">5.13.3.1. Autenticaci√≥n y vistas: c√≥mo generar c√≥digo dependiendo del tipo de usuario</h4>

<p>En las vistas, tenemos un par de directivas de Blade muy √∫tiles relacionadas con las sesiones.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="o">@</span><span class="n">auth</span>
   <span class="mf">...</span>   <span class="c1">// Este c√≥digo se ejecuta si existe un usuario logueado</span>
   <span class="o">@</span><span class="n">endauth</span>
   <span class="o">@</span><span class="n">guest</span>
   <span class="mf">...</span>   <span class="c1">// Este c√≥digo se ejecuta si NO existe usuario logueado</span>
   <span class="o">@</span><span class="n">endguest</span>
</code></pre></div></div>

<p>Adem√°s, podemos acceder a los datos del usuario mediante la clase Auth:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Auth</span><span class="o">::</span><span class="nf">user</span><span class="p">()</span> <span class="err">‚Üí</span> <span class="nc">Devuelve</span> <span class="n">el</span> <span class="n">usuario</span> <span class="n">actualmente</span> <span class="n">logueado</span> <span class="n">o</span> <span class="kc">null</span> <span class="n">si</span> <span class="n">no</span> <span class="n">hay</span> <span class="n">ninguna</span> <span class="n">sesi√≥n</span> <span class="n">abierta</span><span class="mf">.</span>
<span class="nc">Auth</span><span class="o">::</span><span class="nf">check</span><span class="p">()</span> <span class="err">‚Üí</span> <span class="nc">Devuelve</span> <span class="kc">true</span> <span class="n">si</span> <span class="n">el</span> <span class="n">usuario</span> <span class="n">actual</span> <span class="n">est√°</span> <span class="n">logueado</span><span class="mf">.</span>
</code></pre></div></div>

<p>(M√°s m√©todos de Auth en https://laravel.com/docs/8.x/authentication)</p>

<h4 id="51332-autenticaci√≥n-y-middlewares-c√≥mo-proteger-los-controladores">5.13.3.2. Autenticaci√≥n y middlewares: c√≥mo proteger los controladores</h4>

<p>Los middlewares son componentes software de Laravel que capturan y filtran todas las peticiones HTTP que llegan a la aplicaci√≥n.
Est√°n ubicados en App/Http/Middleware.</p>

<p>Hay dos middlewares relacionados con la autenticaci√≥n en Laravel: Authenticate (alias ‚Äúauth‚Äù) y RedirectIfAuthenticated (alias ‚Äúguest‚Äù). Los alias se definen en App/Http/Kernel.php.</p>

<p>Podemos usar estos middlewares en el constructor de nuestros controladores para protegerlos en todo o en parte:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// Solo usuarios logueados podr√°n acceder a este controlador:</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">middleware</span><span class="p">(</span><span class="s2">"auth"</span><span class="p">);</span> 
      <span class="c1">// Solo usuarios logueados podr√°n acceder a los m√©todos create() y edit():</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">middleware</span><span class="p">(</span><span class="s2">"auth"</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">only</span><span class="p">(</span><span class="s2">"create"</span><span class="p">,</span> <span class="s2">"edit"</span><span class="p">);</span>
      <span class="c1">// Solo usuarios logueados podr√°n acceder al controlador excepto a show():</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">middleware</span><span class="p">(</span><span class="s2">"auth"</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">except</span><span class="p">(</span><span class="s2">"show"</span><span class="p">);</span>
   <span class="p">}</span>
</code></pre></div></div>

<p>El middleware auth tambi√©n puede usarse en el enrutador, para proteger todo el controlador, as√≠:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">Route</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'/ruta-a-proteger'</span><span class="p">,</span> <span class="s1">'Controlador@metodo'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">middleware</span><span class="p">(</span><span class="s1">'auth'</span><span class="p">);</span>
</code></pre></div></div>

:ET