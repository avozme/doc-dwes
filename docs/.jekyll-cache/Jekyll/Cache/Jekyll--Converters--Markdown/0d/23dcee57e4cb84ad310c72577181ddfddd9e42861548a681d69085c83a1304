I"dL<h2 class="no_toc" id="23-la-sintaxis-de-php">2.3. La sintaxis de PHP</h2>

<ul id="markdown-toc">
  <li><a href="#231-cómo-embeber-php-dentro-de-html" id="markdown-toc-231-cómo-embeber-php-dentro-de-html">2.3.1. Cómo embeber PHP dentro de HTML</a></li>
  <li><a href="#232-comentarios" id="markdown-toc-232-comentarios">2.3.2. Comentarios</a></li>
  <li><a href="#233-operadores" id="markdown-toc-233-operadores">2.3.3. Operadores</a></li>
  <li><a href="#234-variables" id="markdown-toc-234-variables">2.3.4. Variables</a></li>
  <li><a href="#235-arrays" id="markdown-toc-235-arrays">2.3.5. Arrays</a></li>
  <li><a href="#236-estructuras-de-control" id="markdown-toc-236-estructuras-de-control">2.3.6. Estructuras de control</a>    <ul>
      <li><a href="#condicionales" id="markdown-toc-condicionales">Condicionales</a></li>
      <li><a href="#bucle-while" id="markdown-toc-bucle-while">Bucle while</a></li>
      <li><a href="#bucle-repeat" id="markdown-toc-bucle-repeat">Bucle repeat</a></li>
      <li><a href="#bucles-for-y-foreach" id="markdown-toc-bucles-for-y-foreach">Bucles for y foreach</a></li>
    </ul>
  </li>
  <li><a href="#237-funciones-y-procedimientos" id="markdown-toc-237-funciones-y-procedimientos">2.3.7. Funciones y procedimientos</a></li>
  <li><a href="#238-clases-y-objetos-solo-en-php5-y-php7" id="markdown-toc-238-clases-y-objetos-solo-en-php5-y-php7">2.3.8. Clases y objetos (¡solo en PHP5 y PHP7!)</a></li>
  <li><a href="#239-salida-de-datos" id="markdown-toc-239-salida-de-datos">2.3.9. Salida de datos</a></li>
  <li><a href="#2310-paso-de-parámetros-por-la-url" id="markdown-toc-2310-paso-de-parámetros-por-la-url">2.3.10. Paso de parámetros por la URL</a></li>
  <li><a href="#2311-entrada-de-datos-a-través-de-formulario-1" id="markdown-toc-2311-entrada-de-datos-a-través-de-formulario-1">2.3.11. Entrada de datos a través de formulario (1)</a></li>
</ul>

<h3 id="231-cómo-embeber-php-dentro-de-html">2.3.1. Cómo embeber PHP dentro de HTML</h3>

<p>El código PHP se escribe incrustado dentro de un documento de texto mediante estas etiquetas:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php .... ?&gt;</span>
</code></pre></div></div>

<p>La sintaxis clásica está obsoleta desde PHP 7:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">language= </span><span class="s">"php"</span><span class="nt">&gt;</span> <span class="p">...</span> <span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>
<p>Este archivo debe tener extensión .php.</p>

<p>El servidor ejecuta el código PHP que encuentre dentro del archivo, mientras que el código HTML es enviado al cliente sin modificar.</p>

<h3 id="232-comentarios">2.3.2. Comentarios</h3>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Comentario de una línea</span>
<span class="c1">#  Comentario de una línea</span>
<span class="cm">/* Comentario de una o varias líneas */</span>
</code></pre></div></div>

<h3 id="233-operadores">2.3.3. Operadores</h3>

<ul>
  <li>Operadores: son iguales que los de C/C++:</li>
  <li>Asignación: 	$a = 3;</li>
  <li>Comparación:  ==, &lt;=, &gt;=, !=, &lt;=&gt;, etc.</li>
  <li>Operadores aritméticos: +, -, *, /, %…</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Operadores lógicos: &amp;&amp;,</td>
          <td> </td>
          <td>, !</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="234-variables">2.3.4. Variables</h3>

<p>Las variables de una función/clase/método PHP son siempre <strong>locales</strong>, es decir, sólo están disponibles en esa función/clase/método, salvo que se indique otra cosa.</p>

<p>Si se definen variables fuera de una función, serán globales a todo el fichero actual, pero no pueden usarse en el código ubicado en otros ficheros.</p>

<p>El <strong>identificador</strong> de variable siempre debe empezar por $. Esta es una peculiaridad de PHP que al principio descoloca un poco.</p>

<p>No es necesario declararlas: al inicializarlas queda especificado el tipo. A partir de PHP 7 pueden indicarse los tipos predefinidos (int, float, string…)
Ejemplos:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$a</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>                  <span class="c1">// Variable entera (PHP 5)</span>
<span class="n">int</span> <span class="nv">$a</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>              <span class="c1">// Variable entera (PHP 7+)</span>
<span class="nv">$media</span> <span class="o">=</span> <span class="mf">52.75</span><span class="p">;</span>          <span class="c1">// Variable real</span>
<span class="nv">$texto</span> <span class="o">=</span> <span class="s2">"Hoy es lunes"</span><span class="p">;</span> <span class="c1">// Variable string</span>
</code></pre></div></div>

<p>Cualquier variable puede <strong>cambiarse de tipo</strong> con la función <strong>setType()</strong>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$a</span> <span class="o">=</span> <span class="s2">"10"</span><span class="p">;</span>                 <span class="c1">// a es una cadena</span>
<span class="nb">setType</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="s2">"integer"</span><span class="p">);</span>    <span class="c1">// a se convierte a entero</span>
</code></pre></div></div>

<p>Los <strong>tipos de datos</strong> predefinidos en PHP son:</p>

<ul>
  <li>integer (entero)</li>
  <li>double (real)</li>
  <li>bool (booleano)</li>
  <li>string (cadena)</li>
  <li>array (pues eso)</li>
</ul>

<h3 id="235-arrays">2.3.5. Arrays</h3>

<p>Los arrays en PHP son colecciones de variables del mismo o de distinto tipo identificadas por un índice. Se parecen más a los ArrayList de Java que a los arrays clásicos propiamente dichos.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"lunes"</span><span class="p">;</span>
<span class="nv">$a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"martes"</span><span class="p">;</span>
<span class="nv">$a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"miércoles"</span><span class="p">;</span>
</code></pre></div></div>

<p>El índice no tiene por qué ser un número entero: puede ser un String (array asociativo):</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$a</span><span class="p">[</span><span class="s2">"ESP"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"España"</span><span class="p">;</span>
<span class="nv">$a</span><span class="p">[</span><span class="s2">"FRA"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Francia"</span><span class="p">;</span>
<span class="nv">$a</span><span class="p">[</span><span class="s2">"POR"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Portugal"</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="236-estructuras-de-control">2.3.6. Estructuras de control</h3>

<h4 id="condicionales">Condicionales</h4>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">condición</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">acciones</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span>
<span class="p">{</span>
<span class="n">acciones</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="bucle-while">Bucle while</h4>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="n">condición</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">acciones</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="bucle-repeat">Bucle repeat</h4>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">do</span>
<span class="p">{</span>
<span class="n">acciones</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">while</span> <span class="p">(</span><span class="n">condición</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="bucles-for-y-foreach">Bucles for y foreach</h4>

<p>El bucle for controlado por contador es idéntico a C/C++ y Java:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">inicialización</span><span class="p">;</span> <span class="n">condición</span><span class="p">;</span> <span class="n">incremento</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">acciones</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Hay una variedad de bucle for muy interesante: el bucle foreach para recorrido de arrays asociativos:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">foreach</span> <span class="p">(</span><span class="nv">$array</span> <span class="k">as</span> <span class="nv">$índice</span><span class="o">=&gt;</span><span class="nv">$var</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">acciones</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>El bucle foreach se repite una vez para cada valor guardado en el array. Ese valor se asigna a la variable $var en cada repetición.</p>

<h3 id="237-funciones-y-procedimientos">2.3.7. Funciones y procedimientos</h3>

<p>Los subprogramas (funciones y procedimientos) se escriben en PHP con la misma palabra: function.</p>

<ul>
  <li>Las <strong>funciones</strong> deben devolver un valor en su última línea con return. Si necesitas devolver varios valores, puedes empaquetarlos en un array.</li>
  <li>Los <strong>procedimientos</strong> no tienen return. Realizan su función y terminan.</li>
</ul>

<p>Los <strong>parámetros</strong> de la función en PHP siembre se pasan por valor.</p>

<p>Por ejemplo:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">calcular_iva</span><span class="p">(</span><span class="nv">$base</span><span class="p">,</span> <span class="nv">$porcentaje</span><span class="p">)</span>
<span class="p">{</span>
   <span class="nv">$total</span> <span class="o">=</span> <span class="nv">$base</span> <span class="o">*</span> <span class="nv">$porcentaje</span> <span class="o">/</span><span class="mi">100</span><span class="p">;</span>
   <span class="k">return</span> <span class="nv">$total</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="238-clases-y-objetos-solo-en-php5-y-php7">2.3.8. Clases y objetos (¡solo en PHP5 y PHP7!)</h3>

<p>Las clases, métodos y atributos se declaran de forma muy semejante a C++ y Java:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">miClase</span>
<span class="p">{</span>
    <span class="c1">// Declaración de propiedades (atributos)</span>
    <span class="k">public</span> <span class="nv">$var</span> <span class="o">=</span> <span class="s1">'soy una variable de clase'</span><span class="p">;</span>

    <span class="c1">// Método constructor (siempre se llama __construct)</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="nv">$valor</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$var</span> <span class="o">=</span> <span class="nv">$valor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Declaración de métodos</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">mostrarVar</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="k">var</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">private</span> <span class="k">function</span> <span class="n">resetVar</span><span class="p">()</span> <span class="p">{</span>
       <span class="nv">$this</span><span class="o">-&gt;</span><span class="k">var</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Para instanciar un objeto de una clase, se usa la palabra new. El constructor puede llevar parámetros o no, como en Java. Por ejemplo:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$miObjeto</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">miClase</span><span class="p">(</span><span class="s1">'Estoy aprendiendo PHP'</span><span class="p">);</span>
<span class="nv">$miObjeto</span><span class="o">-&gt;</span><span class="nf">mostrarVar</span><span class="p">();</span>
</code></pre></div></div>

<p>La salida de este programa sería “Estoy aprendiendo PHP”.</p>

<h3 id="239-salida-de-datos">2.3.9. Salida de datos</h3>

<p>PHP puede hacer salidas de datos como cualquier otro lenguaje de programación: puede enviar texto a una impresora, datos a un fichero o puede dibujar ventanas y componentes en un entorno gráfico de usuario.</p>

<p>Pero cuando PHP se ejecuta como parte de una aplicación web, nada de eso tiene sentido: esa salida se produciría en el servidor, y nosotros no estamos allí para verla. Nosotros estamos en nuestro cliente (navegador web), pidiendo al servidor que ejecute un programa PHP.</p>

<p>Recuerda que, en este contexto, la salida PHP es siempre código HTML válido. Ese código HTML será recibido por tu navegador, interpretado y mostrado en la ventana del navegador.</p>

<p>Observa el uso de “echo” para producir una salida HTML desde este pequeño script PHP:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
 <span class="cp">&lt;?php 
     echo "Soy un script de PHP y estoy generando 
               código HTML. Para demostrarlo
               voy a escribir &lt;b&gt;esto en negrita&lt;/b&gt;"
  ?&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<h3 id="2310-paso-de-parámetros-por-la-url">2.3.10. Paso de parámetros por la URL</h3>

<p>Las aplicaciones web pueden recibir parámetros a través de la propia URL de invocación del servidor.</p>

<p>Imagina que tenemos este link en un documento HTML:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"pagina.php?variable1=valor1&amp;variable2=valor2&amp;etc…"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>Al hacer clic en él, pediremos al servidor que ejecute el programa cuyo código fuente está en el archivo “pagina.php”, ¿verdad?</p>

<p>Pues bien, ese programa “pagina.php” puede acceder a las variables “variable1”, “variable2”, etc.</p>

<p>Esto se hace a traves del array global de PHP <strong>$_GET</strong>, que se indexa con el nombre de las variables. Así:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">echo</span> <span class="s2">"La variable 2 vale:"</span><span class="mf">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">'variable2'</span><span class="p">]</span><span class="mf">.</span><span class="s2">"&lt;br&gt;"</span><span class="p">;</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<h3 id="2311-entrada-de-datos-a-través-de-formulario-1">2.3.11. Entrada de datos a través de formulario (1)</h3>

<p>Como PHP se ejecuta dentro de HTML, sólo puede recibir datos del usuario de la aplicación a través del navegador web.</p>

<p>Y sólo hay una forma de introducir datos en una página web: a través de un formulario.</p>

<p>Veámoslo con un ejemplo. Supongamos que hemos definido en HTML este sencillo formulario:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">action=</span><span class="s">"destino.php"</span><span class="nt">&gt;</span>
Nombre<span class="nt">&lt;br/&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"nombre"</span><span class="nt">&gt;&lt;br/&gt;</span>
Apellidos<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"apellidos"</span><span class="nt">&gt;&lt;br/&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<p>Al pulsar el botón “Enviar”, se cargará el script destino.php en el servidor.</p>

<p>Ese script recibirá dos variables HTML llamadas nombre y apellido, con el valor que el usuario haya introducido en el formulario.</p>

<p>Para acceder a las variables HTML, se usa el array del sistema <strong>$_POST</strong>, indexándolo con el nombre de la variable:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> 
     <span class="k">echo</span> <span class="s2">"La variable nombre vale"</span><span class="mf">.</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'nombre'</span><span class="p">]</span><span class="mf">.</span><span class="s2">"&lt;br&gt;"</span> 
<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>Observa que $_POST es una variable semejante a $_GET. Puedes utilizar una u otra según el valor del atributo <em>method</em> de tu formulario HTML.</p>

<p>La variable <strong>$_REQUEST</strong> sirve tanto para POST como para GET. <strong>Por eso será la que nosotros usaremos preferentemente en nuestros programas</strong>.</p>

:ET