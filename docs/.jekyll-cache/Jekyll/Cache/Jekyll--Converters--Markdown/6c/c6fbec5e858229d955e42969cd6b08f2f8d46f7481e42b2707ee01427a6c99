I"	0<h2 id="86-ruby">8.6. Ruby</h2>

<h3 id="861-características-del-lenguaje-ruby">8.6.1. Características del lenguaje Ruby</h3>

<p>Fecha de aparición: 1995</p>

<p>Perspectivas:</p>

<ul>
  <li>Uso y popularidad creciente.</li>
  <li>Base de programadores fiel y especializada.</li>
  <li>Excelente relación señal/ruido.</li>
  <li>Aún tiene algunos problemas por resolver: El lenguaje todavía está en fase de importantes cambios, tiene peor rendimiento que Python o PHP y muchos módulos (gemas) están mal documentados.</li>
</ul>

<p>Filosofía:</p>

<ul>
  <li>Completa –y verdaderamente– orientado a objetos. Todo es un objeto.</li>
  <li>Admite otros paradigmas ocultos bajo los objetos.</li>
  <li>“Rápido y fácil”. Es un lenguaje divertido: de programadores para programadores.</li>
  <li>Curva de aprendizaje larga pero nunca abrupta.</li>
  <li>Potente sistema de expresiones regulares.</li>
  <li>En combinación con Rails, ideal para desarrollo web MVC rápido y basado en prototipos.</li>
</ul>

<h4 id="y-ruby-on-rails">¿Y Ruby on Rails?</h4>

<p>Rails, también conocido como <em>Ruby-on-rails</em>, es un framework para desarrollar aplicaciones web MVC con Ruby.</p>

<p>Apareció en 2004 y gustó tanto que otros frameworks para otros lenguajes (como Laravel para PHP) se han inspirado en su forma de trabajar: abundantes capas de abstracción para evitar tareas de bajo nivel, <em>scaffolding</em>, integración con Ajax, <em>Convention over Configuration</em> (CoC) y <em>Don’t Repeat Yourself</em> (DRY).</p>

<p>Rails se hizo tan famoso que mucha gente, aún hoy en día, confunde el lenguaje (Ruby) con el framework (Ruby on Rails).</p>

<h3 id="862-configuración-necesaria-en-el-servidor">8.6.2. Configuración necesaria en el servidor</h3>

<p>Para poder ejecutar scripts en Ruby en un servidor web Apache o similar, necesitarás:</p>

<ul>
  <li>Instalar el intérprete Ruby en el sistema.</li>
  <li>Instalar el módulo de Ruby (mod_ruby) y/o el módulo cgi (mod_cgi) para Apache.</li>
  <li>Configurar el manejador de Apache para CGI.</li>
  <li>Instalar módulos adicionales para Ruby (como cgi o mysql) si son necesarios.</li>
</ul>

<p>Como en el caso de Perl o Python, Ruby puede correr de forma nativa en Apache (más rápido pero menos frecuente) o como script CGI.</p>

<h3 id="863-sintaxis-básica-de-ruby">8.6.3. Sintaxis básica de Ruby</h3>

<p>En Ruby, no es necesario declarar las variables. El tipado es dinámico (tipo <em>duck</em>: si anda como un pato y parece un pato, es que es un pato).</p>

<p>Todo es un objeto en este lenguaje, incluso números enteros o los valores constantes, lo cual conduce a expresiones chocantes como estas:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span><span class="p">.</span><span class="nf">isEven?</span>
<span class="s2">"cadena"</span><span class="p">.</span><span class="nf">lenght</span>
<span class="n">variable_cadena</span><span class="p">.</span><span class="nf">chop!</span>
</code></pre></div></div>

<p>Ruby está lleno de convenciones para evitar tener que llenar la documentación de explicaciones innecesarias (a esto se le llama “filosofía CoC” = <em>Convention over Configuracion</em>). Por ejemplo:</p>
<ul>
  <li>Es una convención que todos los métodos cuyo nombre termine en una interrogación, deben devolver un booleano. En el ejemplo anterior, el método <em>isEven</em> es uno de ellos.</li>
  <li>Otra convención es que todos los métodos cuyo nombre termine en una admiración, modificarán irreversiblemente el objeto con el que se invocan. En el ejemplo anterior, el método <em>chop!</em> troceará la cadena cada vez que encuentre un espacio en blanco en su interior, convirtiéndola en un array de cadenas.</li>
</ul>

<p>Los operadores de Ruby son los habituales:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Comparaci</span><span class="err">ó</span><span class="ss">n: </span><span class="o">==</span><span class="p">,</span> <span class="o">&lt;</span><span class="p">,</span> <span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;=</span><span class="p">,</span> <span class="o">&gt;=</span><span class="p">,</span> <span class="o">=</span><span class="p">,</span> <span class="o">!=</span> 
<span class="no">Asignaci</span><span class="err">ó</span><span class="ss">n: </span><span class="o">=</span>
</code></pre></div></div>

<p>Las estructuras de control también te resultarán familiares. No se utilizan llaves ({…}) para marcar los bloques, sino que cada bloque finaliza con la palabra <em>end</em>. El sangrado es optativo pero, por supuesto, muy recomendable.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">condicion</span> 
  <span class="no">Acciones</span>
<span class="k">end</span>

<span class="k">if</span> <span class="n">condicion</span>
  <span class="no">Acciones</span><span class="o">-</span><span class="mi">1</span>
<span class="k">else</span> 
  <span class="no">Acciones</span><span class="o">-</span><span class="mi">2</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Sin embargo, el uso de bucles clásicos casi siempre puede sustituirse por iteradores sobre objetos, algo cada vez más frecuente en los lenguajes orientados a objetos:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">variable_array</span><span class="p">.</span><span class="nf">do_each</span>
   <span class="o">...</span>
<span class="k">end</span>

<span class="n">num_rows</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
   <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="864-entrada--salida">8.6.4. Entrada / Salida</h3>

<p>La entrada de datos a través de un formulario HTML se hace usando un objeto de la clase CGI. La salida, con una sencilla sentencia <em>print</em>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sr">//</span> <span class="no">Leer</span> <span class="n">datos</span> <span class="n">de</span> <span class="n">un</span> <span class="n">formulario</span>
<span class="nb">require</span> <span class="s2">"cgi"</span>
<span class="n">cgi</span> <span class="o">=</span> <span class="no">CGI</span><span class="p">.</span><span class="nf">new</span>
<span class="n">variable</span> <span class="o">=</span> <span class="n">cgi</span><span class="p">[</span><span class="s2">"campo"</span><span class="p">];</span>

<span class="sr">//</span> <span class="no">Salida</span> <span class="n">de</span> <span class="n">datos</span>
<span class="nb">print</span> <span class="s2">"cadena"</span><span class="p">,</span> <span class="n">variable</span><span class="p">,</span> <span class="s2">"cadena2"</span><span class="p">,</span> <span class="o">...</span> 
</code></pre></div></div>

<h3 id="865-bibliotecas-clases-y-métodos">8.6.5. Bibliotecas, clases y métodos</h3>

<p>Las clases en Ruby se declaran de forma muy semejante a Python (observa cómo el símbolo “&lt;” indica herencia):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="n">nombre_clase</span> <span class="o">&lt;</span> <span class="n">clase</span><span class="o">-</span><span class="n">madre</span>
    <span class="k">def</span> <span class="nf">nombre</span><span class="p">(</span><span class="n">parametros</span><span class="p">)</span>
       <span class="no">Acciones</span><span class="p">;</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Las clases se pueden agrupar en módulos llamados “gemas” (<em>gems</em>). Una gema se puede incluir en nuestro código así:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">include</span> <span class="s2">"nombre_gema"</span>
</code></pre></div></div>

<h3 id="866-ejemplo-1-en-ruby-hola-mundo">8.6.6. Ejemplo 1 en Ruby: Hola mundo</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/ruby</span>

<span class="nb">print</span> <span class="s2">"Content-Type: text/html</span><span class="se">\n\n</span><span class="s2">"</span>
<span class="nb">print</span> <span class="s2">"&lt;html&gt;&lt;body&gt;"</span>
<span class="nb">print</span> <span class="s2">"&lt;h1&gt;Hola, mundo&lt;/h1&gt;"</span>
<span class="nb">print</span> <span class="s2">"&lt;/body&gt;&lt;/html&gt;"</span>
</code></pre></div></div>

<h3 id="867-ejemplo-2-en-ruby-login-con-comprobación-de-email-por-ajax">8.6.7. Ejemplo 2 en Ruby: login con comprobación de email por Ajax</h3>

<p>Una vez más, solo mostraremos el script del lado del servidor (login.rb). Para revisar el código del lado del cliente, puedes acudir a la sección dedicada al lenguaje Perl, y sustituir la referencia al script login.pl por login.rb. El resto del código permanecerá idéntico.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/ruby</span>
<span class="nb">require</span> <span class="s2">"mysql"</span>
<span class="nb">require</span> <span class="s2">"cgi"</span>

<span class="k">begin</span>
    <span class="c1"># Conexión con la base de datos</span>
    <span class="n">con</span> <span class="o">=</span> <span class="no">Mysql</span><span class="p">.</span><span class="nf">new</span> <span class="s1">'server'</span><span class="p">,</span> <span class="s1">'db-user'</span><span class="p">,</span> <span class="s1">'db-password'</span><span class="p">,</span> <span class="s1">'db-name'</span>

    <span class="c1"># Recuperamos la información del formulario HTML</span>
    <span class="n">cgi</span> <span class="o">=</span> <span class="no">CGI</span><span class="p">.</span><span class="nf">new</span>
    <span class="nb">name</span> <span class="o">=</span> <span class="n">cgi</span><span class="p">[</span><span class="s2">"username"</span><span class="p">]</span>
    <span class="n">pass</span> <span class="o">=</span> <span class="n">cgi</span><span class="p">[</span><span class="s2">"password"</span><span class="p">]</span>

    <span class="c1"># Consultamos la base de datos</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">con</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="s2">"SELECT id FROM users WHERE user = '</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">' AND password = '</span><span class="si">#{</span><span class="n">pass</span><span class="si">}</span><span class="s2">'"</span><span class="p">)</span>

    <span class="c1"># Generamos la salida JSON para el cliente</span>
    <span class="nb">print</span> <span class="s2">"Content-type: application/json</span><span class="se">\n\n</span><span class="s2">"</span>
    <span class="k">if</span> <span class="n">res</span><span class="p">.</span><span class="nf">num_rows</span> <span class="o">==</span> <span class="mi">0</span>
       <span class="nb">print</span> <span class="sx">%Q!{"error": "Username or password not valid"}!</span>
    <span class="k">else</span>
       <span class="n">row</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="nf">fetch_hash</span>
       <span class="nb">print</span> <span class="sx">%Q!{"success": "Authentication is OK", "userid": "</span><span class="si">#{</span><span class="n">row</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span><span class="si">}</span><span class="sx">" }!</span>
    <span class="k">end</span>
    <span class="n">con</span><span class="p">.</span><span class="nf">close</span> <span class="k">if</span> <span class="n">con</span>    
<span class="k">end</span>
</code></pre></div></div>
:ET