I"¬<h2 id="59-controladores">5.9. Controladores</h2>

<h3 id="591-cuatro-cosas-importantes-sobre-los-controladores-en-laravel">5.9.1. Cuatro cosas importantes sobre los controladores en Laravel</h3>

<p>Los controladores en Laravel heredan de la clase Controller.</p>

<p>Su nombre deber√≠a escribirse en singular, CamelCase y terminando en la palabra Controller. Por ejemplo: UserController, LoginController, ArticleController</p>

<p>Cada m√©todo del controlador debe terminar en un return. Lo que el m√©todo devuelva ser√° convertido autom√°ticamente en una HTTP response 200, excepto si es un array, en cuyo caso se convertir√° autom√°ticamente en JSON.</p>

<p>Se puede actuar sobre la HTTP response devolviendo esto:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="s1">'contenido'</span><span class="p">,</span> <span class="mi">201</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="nb">header</span><span class="p">(</span><span class="s1">'mi-cabecera'</span><span class="p">,</span> <span class="s1">'contenido'</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="nb">header</span><span class="p">(</span><span class="s1">'otra-cabecera'</span><span class="p">,</span> <span class="s1">'m√°s-contenido'</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="nf">cookie</span><span class="p">(</span><span class="s1">'mi-cookie'</span><span class="p">,</span> <span class="s1">'valor'</span><span class="p">);</span>
            <span class="p">(</span><span class="n">etc</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="592-tres-formas-de-crear-un-controlador">5.9.2. Tres formas de crear un controlador</h3>

<p><strong>Forma 1. Crear un controlador vac√≠o.</strong></p>

<p>Por ejemplo, para crear un controlador para la tabla de usuarios:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   $ php artisan make:controller UserController
</code></pre></div></div>

<p><strong>Forma 2. Crear un controlador de tipo resource.</strong></p>

<p>Estos controladores se generan autom√°ticamente con un andamiaje para construir recursos REST. Es decir, la clase ya llevar√° incorporados los m√©todos index(), create(), store(), show(), edit(), update() y destroy() del est√°ndar REST.</p>

<p>Para crear un controlador as√≠:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   $ php artisan make:controller UserController --resource
</code></pre></div></div>

<p>No te olvides de de a√±adir al enrutador (/routes/web.php) las rutas REST para este tipo controlador. Se pueden resumir las siete rutas en esta sola entrada del enrutador:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Route::resource('nombreRecurso', 'controlador');
</code></pre></div></div>

<p>En nuestro ejemplo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Route::resource('usuarios', 'UserController');
</code></pre></div></div>

<p><strong>Forma 3. Crear un controlador tipo API.</strong></p>

<p>El controlador tipo API es como un resource, pero sin create() ni edit(), porque una API no necesita mostrar los formularios de inserci√≥n/modificaci√≥n.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   $ php artisan make:controller UserController --api
</code></pre></div></div>

<p>De nuevo, no te olvides de las entradas en el enrutador. Puedes englobarlas todas en una sola entrada con este aspecto:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Route::apiResource('usuarios', 'UserController');
</code></pre></div></div>

:ET